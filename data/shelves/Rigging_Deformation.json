{
    "import takSkeleton a...(ts)\nts.gui.showUI()": {
        "label": "import takSkeleton a...(ts)\nts.gui.showUI()",
        "annotation": "Create a skeleton and manage skeleton poses.",
        "image1": "takSkeleton.png",
        "imageOverlayLabel": "",
        "command": "import takSkeleton as ts\nimport imp\nimp.reload(ts)\nts.gui.showUI()",
        "sourceType": "python",
        "noDefaultPopup": true
    },
    "from imp import relo...na_editor.gui.show()": {
        "label": "from imp import relo...na_editor.gui.show()",
        "annotation": "DNA Editor",
        "image1": "MHC.png",
        "imageOverlayLabel": "",
        "command": "from imp import reload\nimport dna_editor; reload(dna_editor)\ndna_editor.gui.show()",
        "sourceType": "python",
        "noDefaultPopup": true
    },
    "import dem_bones\ndem...s\ndem_bones.showUI()": {
        "label": "import dem_bones\ndem...s\ndem_bones.showUI()",
        "annotation": "EA's SSD(Smooth Skin Deformation) tool with custom GUI.",
        "image1": "dembones.jpg",
        "imageOverlayLabel": "",
        "command": "import dem_bones\ndem_bones.showUI()",
        "sourceType": "python",
        "noDefaultPopup": true
    },
    "import imp\nimport ed...PoseGUI()\ngui.show()": {
        "label": "import imp\nimport ed...PoseGUI()\ngui.show()",
        "annotation": "\"takRigLogic\" pose editor.",
        "image1": "dembones.jpg",
        "imageOverlayLabel": "",
        "command": "import imp\nimport editPoseGUI\nimp.reload(editPoseGUI)\ngui = editPoseGUI.EditPoseGUI()\ngui.show()",
        "sourceType": "python",
        "noDefaultPopup": true
    },
    "from imp import relo...d(tsm)\ntsm.showUI()\n": {
        "label": "from imp import relo...d(tsm)\ntsm.showUI()\n",
        "annotation": "from imp import relo...d(tsm)\ntsm.showUI()\n",
        "image1": "HIKCharacterToolSkeleton_100.png",
        "imageOverlayLabel": "",
        "command": "from imp import reload\nimport takSkelMeshManager as tsm; reload(tsm)\ntsm.showUI()\n",
        "sourceType": "python",
        "noDefaultPopup": true
    },
    "import takTools.rigg...skinWeights.showUI()": {
        "label": "import takTools.rigg...skinWeights.showUI()",
        "annotation": "Set skin weights",
        "image1": "skinWeight.png",
        "imageOverlayLabel": "",
        "command": "import takTools.rigging.tak_skinWeights as tak_skinWeights\nimport imp\nimp.reload(tak_skinWeights)\ntak_skinWeights.showUI()",
        "sourceType": "python",
        "noDefaultPopup": true
    },
    "### Select Joint in ...cmds.select(jntList)": {
        "label": "### Select Joint in ...cmds.select(jntList)",
        "annotation": "Select all the child joints",
        "image1": "selChldJnt.bmp",
        "imageOverlayLabel": "",
        "command": "### Select Joint in Hierarchy ###\njntList = cmds.ls(sl = True, dag = True, type = 'joint')\ncmds.select(jntList)",
        "sourceType": "python",
        "noDefaultPopup": true
    },
    "import takTools.comm...isc.smoothSkinBind()": {
        "label": "import takTools.comm...isc.smoothSkinBind()",
        "annotation": "Select surface(s) and a joint.",
        "image1": "smoothSkin.png",
        "imageOverlayLabel": "",
        "command": "import takTools.common.tak_misc as tak_misc\nimport imp\nimp.reload(tak_misc)\ntak_misc.smoothSkinBind()",
        "sourceType": "python",
        "noDefaultPopup": true
    },
    "DetachSkin...DetachSkin": {
        "label": "DetachSkin...DetachSkin",
        "annotation": "Detach Skin",
        "image1": "detachSkin.png",
        "imageOverlayLabel": "",
        "command": "DetachSkin",
        "sourceType": "mel",
        "noDefaultPopup": true
    },
    "import takTools.rigg...ak_ROM)\ntak_ROM.UI()": {
        "label": "import takTools.rigg...ak_ROM)\ntak_ROM.UI()",
        "annotation": "Create range of motion for selected object.",
        "image1": "ROM.png",
        "imageOverlayLabel": "",
        "command": "import takTools.rigging.tak_ROM as tak_ROM\nimport imp\nimp.reload(tak_ROM)\ntak_ROM.UI()",
        "sourceType": "python",
        "noDefaultPopup": true
    },
    "### Weight Hammer on...weightHammerVerts;')": {
        "label": "### Weight Hammer on...weightHammerVerts;')",
        "annotation": "Weight Hammer on Edge Loop",
        "image1": "weightHammerOnEdgeLoop.bmp",
        "imageOverlayLabel": "",
        "command": "### Weight Hammer on Edge Loop ###\ncmds.SelectEdgeLoopSp()\nmel.eval('weightHammerVerts;')",
        "sourceType": "python",
        "noDefaultPopup": true
    },
    "from maya import cmd...o(weightHammerBrush)": {
        "label": "from maya import cmd...o(weightHammerBrush)",
        "annotation": "from maya import cmds, mel\n\nweightHammerBrush = cmds.artSelectCt...",
        "image1": "weightHammer.png",
        "imageOverlayLabel": "",
        "command": "from maya import cmds, mel\n\nweightHammerBrush = cmds.artSelectCtx(beforeStrokeCmd='select -cl;', afterStrokeCmd='if (size(`ls -sl`) > 0){WeightHammer;}')\ncmds.setToolTo(weightHammerBrush)",
        "sourceType": "python",
        "noDefaultPopup": true
    },
    "import takTools.rigg...nWeightBrush.paint()": {
        "label": "import takTools.rigg...nWeightBrush.paint()",
        "annotation": "tf_smoothSkinWeight",
        "image1": "tf_smoothSkin.bmp",
        "imageOverlayLabel": "",
        "command": "import takTools.rigging.averageVertexSkinWeightBrush as averageVertexSkinWeightBrush\nimport imp\nimp.reload(averageVertexSkinWeightBrush)\naverageVertexSkinWeightBrush.paint()",
        "sourceType": "python",
        "noDefaultPopup": true
    },
    "if (! `pluginInfo -q...moothWeightsToolCtx;": {
        "label": "if (! `pluginInfo -q...moothWeightsToolCtx;",
        "annotation": "Paint Smooth Weights Tool",
        "image1": "brSmoothWeights.svg",
        "imageOverlayLabel": "",
        "command": "if (! `pluginInfo -q -loaded brSmoothWeights`)\n{\n    loadPlugin brSmoothWeights;\n}\nbrSmoothWeightsToolCtx;",
        "sourceType": "mel",
        "noDefaultPopup": true
    },
    "ArtPaintSkinWeightsT...inWeightsToolOptions": {
        "label": "ArtPaintSkinWeightsT...inWeightsToolOptions",
        "annotation": "Paint skin weights tool options",
        "image1": "paintSkinWeights.png",
        "imageOverlayLabel": "",
        "command": "ArtPaintSkinWeightsToolOptions",
        "sourceType": "mel",
        "noDefaultPopup": true
    },
    "MirrorSkinWeights...MirrorSkinWeights": {
        "label": "MirrorSkinWeights...MirrorSkinWeights",
        "annotation": "Select either a single skin or the source and the destination skin.",
        "image1": "mirrorSkinWeight.png",
        "imageOverlayLabel": "",
        "command": "MirrorSkinWeights",
        "sourceType": "mel",
        "noDefaultPopup": true
    },
    "import takTools.comm...isc.addInfCopySkin()": {
        "label": "import takTools.comm...isc.addInfCopySkin()",
        "annotation": "Select the source surface and the destination surface or component.",
        "image1": "copySkinWeight.png",
        "imageOverlayLabel": "",
        "command": "import takTools.common.tak_misc as tak_misc\nimport imp\nimp.reload(tak_misc)\ntak_misc.addInfCopySkin()",
        "sourceType": "python",
        "noDefaultPopup": true
    },
    "import takTools.util....duplicateSkinMesh()": {
        "label": "import takTools.util....duplicateSkinMesh()",
        "annotation": "Separate selected faces as separated skin mesh.",
        "image1": "polyDuplicateFacet.png",
        "imageOverlayLabel": "",
        "command": "import takTools.utils.skin as skinUtil\nimport imp\nimp.reload(skinUtil)\nskinUtil.duplicateSkinMesh()",
        "sourceType": "python",
        "noDefaultPopup": true
    },
    "import takTools.util...apVertices(src, trg)": {
        "label": "import takTools.util...apVertices(src, trg)",
        "annotation": "Select source skin geo and target geo",
        "image1": "polyConvertToVertices.png",
        "imageOverlayLabel": "",
        "command": "import takTools.utils.skin as skinUtil\nimport imp\nimp.reload(skinUtil)\nsels = cmds.ls(sl=True)\ntrg = sels.pop(-1)\nfor src in sels: skinUtil.copySkinOverlapVertices(src, trg)",
        "sourceType": "python",
        "noDefaultPopup": true
    },
    "import takTools.comm...\ntak_misc.addInfUI()": {
        "label": "import takTools.comm...\ntak_misc.addInfUI()",
        "annotation": "Add influences. Select influences and geometry.",
        "image1": "addWrapInfluence.png",
        "imageOverlayLabel": "",
        "command": "import takTools.common.tak_misc as tak_misc\nimport imp\nimp.reload(tak_misc)\ntak_misc.addInfUI()",
        "sourceType": "python",
        "noDefaultPopup": true
    },
    "RemoveInfluence...RemoveInfluence": {
        "label": "RemoveInfluence...RemoveInfluence",
        "annotation": "Remove Influence",
        "image1": "removeWrapInfluence.png",
        "imageOverlayLabel": "",
        "command": "RemoveInfluence",
        "sourceType": "mel",
        "noDefaultPopup": true
    },
    "import takTools.rigg...\nbSkinSaver.showUI()": {
        "label": "import takTools.rigg...\nbSkinSaver.showUI()",
        "annotation": "import takTools.rigg...\nbSkinSaver.showUI()",
        "image1": "save.png",
        "imageOverlayLabel": "",
        "command": "import takTools.rigging.bSkinSaver as bSkinSaver\nimport imp\nimp.reload(bSkinSaver)\nbSkinSaver.showUI()",
        "sourceType": "python",
        "noDefaultPopup": true
    },
    "import takTools.rigg...tak_helperJoint.ui()": {
        "label": "import takTools.rigg...tak_helperJoint.ui()",
        "annotation": "import takTools.rigg...tak_helperJoint.ui()",
        "image1": "tak_helperJoint.png",
        "imageOverlayLabel": "",
        "command": "import takTools.rigging.tak_helperJoint as tak_helperJoint\nimport imp\nimp.reload(tak_helperJoint)\ntak_helperJoint.ui()",
        "sourceType": "python",
        "noDefaultPopup": true
    },
    "import takTools.rigg...ak_correctiveBS.UI()": {
        "label": "import takTools.rigg...ak_correctiveBS.UI()",
        "annotation": "Corrective blend shape tools.",
        "image1": "correctiveBS.png",
        "imageOverlayLabel": "",
        "command": "import takTools.rigging.tak_correctiveBS as tak_correctiveBS\nimport imp\nimp.reload(tak_correctiveBS)\nposCorObj = tak_correctiveBS.UI()",
        "sourceType": "python",
        "noDefaultPopup": true
    },
    "import takTools.rigg...t)\ntak_LRTarget.UI()": {
        "label": "import takTools.rigg...t)\ntak_LRTarget.UI()",
        "annotation": "import takTools.rigg...t)\ntak_LRTarget.UI()",
        "image1": "LRTarget.bmp",
        "imageOverlayLabel": "",
        "command": "import takTools.rigging.tak_LRTarget as tak_LRTarget\nimport imp\nimp.reload(tak_LRTarget)\ntak_LRTarget.UI()",
        "sourceType": "python",
        "noDefaultPopup": true
    },
    "ShapeEditor...ShapeEditor": {
        "label": "ShapeEditor...ShapeEditor",
        "annotation": "Shape Editor",
        "image1": "blendShapeEditor.png",
        "imageOverlayLabel": "",
        "command": "ShapeEditor",
        "sourceType": "mel",
        "noDefaultPopup": true
    },
    "import takTools.comm...sc.editDfmMemberUI()": {
        "label": "import takTools.comm...sc.editDfmMemberUI()",
        "annotation": "import takTools.comm...sc.editDfmMemberUI()",
        "image1": "editDfmMember.png",
        "imageOverlayLabel": "",
        "command": "import takTools.common.tak_misc as tak_misc\nimport imp\nimp.reload(tak_misc)\ntak_misc.editDfmMemberUI()",
        "sourceType": "python",
        "noDefaultPopup": true
    }
}