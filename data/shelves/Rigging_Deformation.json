{
    "order": "21", 
    "tabName": "Rigging", 
    "frameName": "Deformation", 
    "collapse": false, 
    "shelfButtonInfos": [
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "python", 
            "label": "import takSkeleton a...(ts)\nts.gui.showUI()", 
            "command": "import takSkeleton as ts\nimport imp\nimp.reload(ts)\nts.gui.showUI()", 
            "image1": "takSkeleton.png", 
            "annotation": "Create a skeleton and manage skeleton poses."
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "python", 
            "label": "from imp import relo...na_editor.gui.show()", 
            "command": "from imp import reload\nimport dna_editor; reload(dna_editor)\ndna_editor.gui.show()", 
            "image1": "noPreview.png", 
            "annotation": "DNA Editor"
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "python", 
            "label": "import dem_bones\ndem...s\ndem_bones.showUI()", 
            "command": "import dem_bones\ndem_bones.showUI()", 
            "image1": "noPreview.png", 
            "annotation": "EA's SSD(Smooth Skin Deformation) tool with custom GUI."
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "python", 
            "label": "import imp\nimport ed...PoseGUI()\ngui.show()", 
            "command": "import imp\nimport editPoseGUI\nimp.reload(editPoseGUI)\ngui = editPoseGUI.EditPoseGUI()\ngui.show()", 
            "image1": "noPreview.png", 
            "annotation": "\"takRigLogic\" pose editor."
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "python", 
            "label": "from imp import relo...d(tsm)\ntsm.showUI()\n", 
            "command": "from imp import reload\nimport takSkelMeshManager as tsm; reload(tsm)\ntsm.showUI()\n", 
            "image1": "HIKCharacterToolSkeleton_100.png", 
            "annotation": "from imp import relo...d(tsm)\ntsm.showUI()\n"
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "python", 
            "label": "import takTools.rigg...skinWeights.showUI()", 
            "command": "import takTools.rigging.tak_skinWeights as tak_skinWeights\nimport imp\nimp.reload(tak_skinWeights)\ntak_skinWeights.showUI()", 
            "image1": "skinWeight.png", 
            "annotation": "Set skin weights"
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "python", 
            "label": "### Select Joint in ...cmds.select(jntList)", 
            "command": "### Select Joint in Hierarchy ###\njntList = cmds.ls(sl = True, dag = True, type = 'joint')\ncmds.select(jntList)", 
            "image1": "selChldJnt.bmp", 
            "annotation": "Select all the child joints"
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "python", 
            "label": "import takTools.comm...isc.smoothSkinBind()", 
            "command": "import takTools.common.tak_misc as tak_misc\nimport imp\nimp.reload(tak_misc)\ntak_misc.smoothSkinBind()", 
            "image1": "smoothSkin.png", 
            "annotation": "Select surface(s) and a joint."
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "mel", 
            "label": "DetachSkin...DetachSkin", 
            "command": "DetachSkin", 
            "image1": "detachSkin.png", 
            "annotation": "Detach Skin"
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "python", 
            "label": "import takTools.rigg...ak_ROM)\ntak_ROM.UI()", 
            "command": "import takTools.rigging.tak_ROM as tak_ROM\nimport imp\nimp.reload(tak_ROM)\ntak_ROM.UI()", 
            "image1": "ROM.png", 
            "annotation": "Create range of motion for selected object."
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "python", 
            "label": "### Weight Hammer on...weightHammerVerts;')", 
            "command": "### Weight Hammer on Edge Loop ###\ncmds.SelectEdgeLoopSp()\nmel.eval('weightHammerVerts;')", 
            "image1": "weightHammerOnEdgeLoop.bmp", 
            "annotation": "Weight Hammer on Edge Loop"
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "python", 
            "label": "from maya import cmd...o(weightHammerBrush)", 
            "command": "from maya import cmds, mel\n\nweightHammerBrush = cmds.artSelectCtx(beforeStrokeCmd='select -cl;', afterStrokeCmd='if (size(`ls -sl`) > 0){WeightHammer;}')\ncmds.setToolTo(weightHammerBrush)", 
            "image1": "weightHammer.png", 
            "annotation": "from maya import cmds, mel\n\nweightHammerBrush = cmds.artSelectCt..."
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "python", 
            "label": "import takTools.rigg...nWeightBrush.paint()", 
            "command": "import takTools.rigging.averageVertexSkinWeightBrush as averageVertexSkinWeightBrush\nimport imp\nimp.reload(averageVertexSkinWeightBrush)\naverageVertexSkinWeightBrush.paint()", 
            "image1": "tf_smoothSkin.bmp", 
            "annotation": "tf_smoothSkinWeight"
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "mel", 
            "label": "if (! `pluginInfo -q...moothWeightsToolCtx;", 
            "command": "if (! `pluginInfo -q -loaded brSmoothWeights`)\n{\n    loadPlugin brSmoothWeights;\n}\nbrSmoothWeightsToolCtx;", 
            "image1": "brSmoothWeights.svg", 
            "annotation": "Paint Smooth Weights Tool"
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "mel", 
            "label": "ArtPaintSkinWeightsT...inWeightsToolOptions", 
            "command": "ArtPaintSkinWeightsToolOptions", 
            "image1": "paintSkinWeights.png", 
            "annotation": "Paint skin weights tool options"
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "mel", 
            "label": "MirrorSkinWeights...MirrorSkinWeights", 
            "command": "MirrorSkinWeights", 
            "image1": "mirrorSkinWeight.png", 
            "annotation": "Select either a single skin or the source and the destination skin."
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "python", 
            "label": "import takTools.comm...isc.addInfCopySkin()", 
            "command": "import takTools.common.tak_misc as tak_misc\nimport imp\nimp.reload(tak_misc)\ntak_misc.addInfCopySkin()", 
            "image1": "copySkinWeight.png", 
            "annotation": "Select the source surface and the destination surface or component."
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "python", 
            "label": "import takTools.util....duplicateSkinMesh()", 
            "command": "import takTools.utils.skin as skinUtil\nimport imp\nimp.reload(skinUtil)\nskinUtil.duplicateSkinMesh()", 
            "image1": "polyDuplicateFacet.png", 
            "annotation": "Separate selected faces as separated skin mesh."
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "python", 
            "label": "import takTools.util...apVertices(src, trg)", 
            "command": "import takTools.utils.skin as skinUtil\nimport imp\nimp.reload(skinUtil)\nsels = cmds.ls(sl=True)\ntrg = sels.pop(-1)\nfor src in sels: skinUtil.copySkinOverlapVertices(src, trg)", 
            "image1": "polyConvertToVertices.png", 
            "annotation": "Select source skin geo and target geo"
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "python", 
            "label": "import takTools.comm...\ntak_misc.addInfUI()", 
            "command": "import takTools.common.tak_misc as tak_misc\nimport imp\nimp.reload(tak_misc)\ntak_misc.addInfUI()", 
            "image1": "addWrapInfluence.png", 
            "annotation": "Add influences. Select influences and geometry."
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "mel", 
            "label": "RemoveInfluence...RemoveInfluence", 
            "command": "RemoveInfluence", 
            "image1": "removeWrapInfluence.png", 
            "annotation": "Remove Influence"
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "python", 
            "label": "bSkinSaver", 
            "command": "import takTools.rigging.bSkinSaver as bSkinSaver\nimport imp\nimp.reload(bSkinSaver)\nbSkinSaver.showUI()", 
            "image1": "save.png", 
            "annotation": "Show bSkinSaver GUI."
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "python", 
            "label": "import takTools.rigg...tak_helperJoint.ui()", 
            "command": "import takTools.rigging.tak_helperJoint as tak_helperJoint\nimport imp\nimp.reload(tak_helperJoint)\ntak_helperJoint.ui()", 
            "image1": "tak_helperJoint.png", 
            "annotation": "import takTools.rigg...tak_helperJoint.ui()"
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "python", 
            "label": "import takTools.rigg...ak_correctiveBS.UI()", 
            "command": "import takTools.rigging.tak_correctiveBS as tak_correctiveBS\nimport imp\nimp.reload(tak_correctiveBS)\nposCorObj = tak_correctiveBS.UI()", 
            "image1": "correctiveBS.png", 
            "annotation": "Corrective blend shape tools."
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "python", 
            "label": "import takTools.rigg...t)\ntak_LRTarget.UI()", 
            "command": "import takTools.rigging.tak_LRTarget as tak_LRTarget\nimport imp\nimp.reload(tak_LRTarget)\ntak_LRTarget.UI()", 
            "image1": "LRTarget.bmp", 
            "annotation": "import takTools.rigg...t)\ntak_LRTarget.UI()"
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "mel", 
            "label": "ShapeEditor...ShapeEditor", 
            "command": "ShapeEditor", 
            "image1": "blendShapeEditor.png", 
            "annotation": "Shape Editor"
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "python", 
            "label": "import takTools.comm...sc.editDfmMemberUI()", 
            "command": "import takTools.common.tak_misc as tak_misc\nimport imp\nimp.reload(tak_misc)\ntak_misc.editDfmMemberUI()", 
            "image1": "editDfmMember.png", 
            "annotation": "import takTools.comm...sc.editDfmMemberUI()"
        }
    ]
}