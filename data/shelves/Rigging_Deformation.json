{
    "order": "21",
    "tabName": "Rigging",
    "frameName": "Deformation",
    "collapse": false,
    "shelfButtonInfos": [
        {
            "label": "Tak Skeleton",
            "annotation": "Create a skeleton and manage skeleton poses.",
            "image1": "takSkeleton.png",
            "imageOverlayLabel": "",
            "command": "import takSkeleton as ts\nimport imp\nimp.reload(ts)\nts.gui.showUI()",
            "sourceType": "python",
            "noDefaultPopup": true
        },
        {
            "label": "DNA Editor",
            "annotation": "DNA Editor",
            "image1": "MHC.png",
            "imageOverlayLabel": "",
            "command": "from imp import reload\nimport dna_editor; reload(dna_editor)\ndna_editor.gui.show()",
            "sourceType": "python",
            "noDefaultPopup": true
        },
        {
            "label": "Dem Bones",
            "annotation": "EA's SSD(Smooth Skin Deformation) tool with custom GUI.",
            "image1": "dembones.jpg",
            "imageOverlayLabel": "",
            "command": "import dem_bones\ndem_bones.showUI()",
            "sourceType": "python",
            "noDefaultPopup": true
        },
        {
            "label": "Rig Logic Editor",
            "annotation": "\"takRigLogic\" pose editor.",
            "image1": "noPreview.png",
            "imageOverlayLabel": "",
            "command": "import imp\nimport editPoseGUI\nimp.reload(editPoseGUI)\ngui = editPoseGUI.EditPoseGUI()\ngui.show()",
            "sourceType": "python",
            "noDefaultPopup": true
        },
        {
            "label": "SkelMesh Manager",
            "annotation": "from imp import relo...d(tsm)\ntsm.showUI()\n",
            "image1": "HIKCharacterToolSkeleton_100.png",
            "imageOverlayLabel": "",
            "command": "from imp import reload\nimport takSkelMeshManager as tsm; reload(tsm)\ntsm.showUI()\n",
            "sourceType": "python",
            "noDefaultPopup": true
        },
        {
            "label": "Tak Skin Weights",
            "annotation": "Show tak skin weights GUI",
            "image1": "smoothSkin.png",
            "imageOverlayLabel": "takSkin",
            "command": "import takTools.rigging.tak_skinWeights as tak_skinWeights\nimport imp\nimp.reload(tak_skinWeights)\ntak_skinWeights.showUI()",
            "sourceType": "python",
            "noDefaultPopup": true
        },
        {
            "label": "Select Child Joints",
            "annotation": "Select all the child joints",
            "image1": "menuIconSkeletons.png",
            "imageOverlayLabel": "child",
            "command": "### Select Joint in Hierarchy ###\njntList = cmds.ls(sl = True, dag = True, type = 'joint')\ncmds.select(jntList)",
            "sourceType": "python",
            "noDefaultPopup": true
        },
        {
            "label": "Smooth Skin Bind",
            "annotation": "Select surface(s) and a joint.",
            "image1": "smoothSkin.png",
            "imageOverlayLabel": "",
            "command": "import takTools.common.tak_misc as tak_misc\nimport imp\nimp.reload(tak_misc)\ntak_misc.smoothSkinBind()",
            "sourceType": "python",
            "noDefaultPopup": true
        },
        {
            "label": "Detach Skin",
            "annotation": "Detach Skin",
            "image1": "detachSkin.png",
            "imageOverlayLabel": "",
            "command": "DetachSkin",
            "sourceType": "mel",
            "noDefaultPopup": true
        },
        {
            "label": "Range of Motion",
            "annotation": "Create range of motion for selected object.",
            "image1": "updateMotionTrail.png",
            "imageOverlayLabel": "range",
            "command": "import takTools.rigging.tak_ROM as tak_ROM\nimport imp\nimp.reload(tak_ROM)\ntak_ROM.UI()",
            "sourceType": "python",
            "noDefaultPopup": true
        },
        {
            "label": "Weight Hammer Loop",
            "annotation": "Weight Hammer on Edge Loop",
            "image1": "weightHammerOnEdgeLoop.bmp",
            "imageOverlayLabel": "",
            "command": "### Weight Hammer on Edge Loop ###\ncmds.SelectEdgeLoopSp()\nmel.eval('weightHammerVerts;')",
            "sourceType": "python",
            "noDefaultPopup": true
        },
        {
            "label": "Weight Hammer Brush",
            "annotation": "Weight Hammer Brush",
            "image1": "weightHammer.png",
            "imageOverlayLabel": "",
            "command": "from maya import cmds, mel\n\nweightHammerBrush = cmds.artSelectCtx(beforeStrokeCmd='select -cl;', afterStrokeCmd='if (size(`ls -sl`) > 0){WeightHammer;}')\ncmds.setToolTo(weightHammerBrush)",
            "sourceType": "python",
            "noDefaultPopup": true
        },
        {
            "label": "Smooth Weight Brush",
            "annotation": "tf_smoothSkinWeight",
            "image1": "tf_smoothSkin.bmp",
            "imageOverlayLabel": "",
            "command": "import takTools.rigging.averageVertexSkinWeightBrush as averageVertexSkinWeightBrush\nimport imp\nimp.reload(averageVertexSkinWeightBrush)\naverageVertexSkinWeightBrush.paint()",
            "sourceType": "python",
            "noDefaultPopup": true
        },
        {
            "label": "brSmooth Weights",
            "annotation": "Paint Smooth Weights Tool",
            "image1": "brSmoothWeights.svg",
            "imageOverlayLabel": "",
            "command": "if (! `pluginInfo -q -loaded brSmoothWeights`)\n{\n    loadPlugin brSmoothWeights;\n}\nbrSmoothWeightsToolCtx;",
            "sourceType": "mel",
            "noDefaultPopup": true
        },
        {
            "label": "Paint Skin Weights",
            "annotation": "Paint skin weights tool options",
            "image1": "paintSkinWeights.png",
            "imageOverlayLabel": "",
            "command": "ArtPaintSkinWeightsToolOptions",
            "sourceType": "mel",
            "noDefaultPopup": true
        },
        {
            "label": "Mirror Skin Weights",
            "annotation": "Select either a single skin or the source and the destination skin.",
            "image1": "mirrorSkinWeight.png",
            "imageOverlayLabel": "",
            "command": "MirrorSkinWeights",
            "sourceType": "mel",
            "noDefaultPopup": true
        },
        {
            "label": "Add Copy Skin",
            "annotation": "Add source influences to target and copy skin weights. When component selected, copy from geometry to components.",
            "image1": "copySkinWeight.png",
            "imageOverlayLabel": "",
            "command": "import takTools.common.tak_misc as tak_misc\nimport imp\nimp.reload(tak_misc)\ntak_misc.addInfCopySkin()",
            "sourceType": "python",
            "noDefaultPopup": true
        },
        {
            "label": "Duplicate Skin",
            "annotation": "Duplicate selected faces as skin mesh.",
            "image1": "polyDuplicateFacet.png",
            "imageOverlayLabel": "",
            "command": "import takTools.utils.skin as skinUtil\nimport imp\nimp.reload(skinUtil)\nskinUtil.duplicateSkinMesh()",
            "sourceType": "python",
            "noDefaultPopup": true
        },
        {
            "label": "Copy Skin Overlap",
            "annotation": "Copy skin from source geometry to target vertices overlaped.",
            "image1": "polyConvertToVertices.png",
            "imageOverlayLabel": "",
            "command": "import takTools.utils.skin as skinUtil\nimport imp\nimp.reload(skinUtil)\nsels = cmds.ls(sl=True)\ntrg = sels.pop(-1)\nfor src in sels: skinUtil.copySkinOverlapVertices(src, trg)",
            "sourceType": "python",
            "noDefaultPopup": true
        },
        {
            "label": "Add Influence",
            "annotation": "Add influences. Select influences and geometry.",
            "image1": "addWrapInfluence.png",
            "imageOverlayLabel": "",
            "command": "import takTools.common.tak_misc as tak_misc\nimport imp\nimp.reload(tak_misc)\ntak_misc.addInfUI()",
            "sourceType": "python",
            "noDefaultPopup": true
        },
        {
            "label": "Remove Influence",
            "annotation": "Remove Influence",
            "image1": "removeWrapInfluence.png",
            "imageOverlayLabel": "",
            "command": "RemoveInfluence",
            "sourceType": "mel",
            "noDefaultPopup": true
        },
        {
            "label": "bSkinSaver",
            "annotation": "Show bSkinSaver GUI.",
            "image1": "save.png",
            "imageOverlayLabel": "skin",
            "command": "import takTools.rigging.bSkinSaver as bSkinSaver\nimport imp\nimp.reload(bSkinSaver)\nbSkinSaver.showUI()",
            "sourceType": "python",
            "noDefaultPopup": true
        },
        {
            "label": "Helper Joints",
            "annotation": "Set up helper joints",
            "image1": "kinJoint.png",
            "imageOverlayLabel": "helper",
            "command": "import takTools.rigging.tak_helperJoint as tak_helperJoint\nimport imp\nimp.reload(tak_helperJoint)\ntak_helperJoint.ui()",
            "sourceType": "python",
            "noDefaultPopup": true
        },
        {
            "label": "Corrective Blendshape",
            "annotation": "Corrective blend shape tools.",
            "image1": "blendShape.png",
            "imageOverlayLabel": "corrective",
            "command": "import takTools.rigging.tak_correctiveBS as tak_correctiveBS\nimport imp\nimp.reload(tak_correctiveBS)\nposCorObj = tak_correctiveBS.UI()",
            "sourceType": "python",
            "noDefaultPopup": true
        },
        {
            "label": "LR Target",
            "annotation": "Build left and right target geometry from a symmetrical expression",
            "image1": "split.png",
            "imageOverlayLabel": "L/R",
            "command": "import takTools.rigging.tak_LRTarget as tak_LRTarget\nimport imp\nimp.reload(tak_LRTarget)\ntak_LRTarget.UI()",
            "sourceType": "python",
            "noDefaultPopup": true
        },
        {
            "label": "Shape Editor",
            "annotation": "Blend Shape Editor",
            "image1": "blendShapeEditor.png",
            "imageOverlayLabel": "",
            "command": "ShapeEditor",
            "sourceType": "mel",
            "noDefaultPopup": true
        },
        {
            "label": "Edit Deform Member",
            "annotation": "Edit Deform Member",
            "image1": "menuIconDeformations.png",
            "imageOverlayLabel": "member",
            "command": "import takTools.common.tak_misc as tak_misc\nimport imp\nimp.reload(tak_misc)\ntak_misc.editDfmMemberUI()",
            "sourceType": "python",
            "noDefaultPopup": true
        }
    ]
}