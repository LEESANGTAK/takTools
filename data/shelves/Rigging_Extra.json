{
    "0": {
        "annotation": "Allows interaction with objects during playback",
        "image1": "interactivePlayback.png",
        "imageOverlayLabel": "",
        "command": "InteractivePlayback",
        "sourceType": "mel"
    },
    "1": {
        "annotation": "",
        "image1": "qualoth_icon.png",
        "imageOverlayLabel": "",
        "command": "import takTools.fx.qualoth_simulation_manager as qualoth_simulation_manager\nimport imp\nimp.reload(qualoth_simulation_manager)\nqualoth_simulation_manager.main()",
        "sourceType": "python"
    },
    "2": {
        "annotation": "nCloth set up with skined geometry.",
        "image1": "nClothSetUp.png",
        "imageOverlayLabel": "",
        "command": "import takTools.rigging.tak_nClothSetUp as tak_nClothSetUp\nimport imp\nimp.reload(tak_nClothSetUp)\ntak_nClothSetUp.nClothSetUp()",
        "sourceType": "python"
    },
    "3": {
        "annotation": "Create locator to keep place for selected items.",
        "image1": "placeHolder.bmp",
        "imageOverlayLabel": "",
        "command": "import takTools.common.tak_misc as tak_misc\nimport imp\nimp.reload(tak_misc)\ntak_misc.plcHldr()",
        "sourceType": "python"
    },
    "4": {
        "annotation": "Create curve with selected objects.",
        "image1": "crvFromSels.bmp",
        "imageOverlayLabel": "",
        "command": "import takTools.common.tak_misc as tak_misc\nimport imp\nimp.reload(tak_misc)\ntak_misc.crvFromSelsUi()",
        "sourceType": "python"
    },
    "5": {
        "annotation": "Extract a curve for selected polygon edges.",
        "image1": "polyEdgeToCurves.png",
        "imageOverlayLabel": "",
        "command": "from imp import reload\nfrom takTools.utils import curve as crvUtil; reload(crvUtil)\ncrvUtil.extractCurveFromSelectedEdges()",
        "sourceType": "python"
    },
    "6": {
        "annotation": "Create curve from edge ring with an selected edge.",
        "image1": "curveFromEdgeRing.png",
        "imageOverlayLabel": "",
        "command": "import takTools.utils.mesh as meshUtil\nimport imp\nimp.reload(meshUtil)\nselEdge = pm.selected()[0]\nmeshUtil.curveFromEdgeRing(selEdge, \"{0}_crv\".format(selEdge.node().getTransform()))\n",
        "sourceType": "python"
    },
    "7": {
        "annotation": "CV Curve Tool",
        "image1": "curveCV.png",
        "imageOverlayLabel": "",
        "command": "CVCurveTool",
        "sourceType": "mel"
    },
    "8": {
        "annotation": "EP Curve Tool.",
        "image1": "curveEP.png",
        "imageOverlayLabel": "",
        "command": "EPCurveTool",
        "sourceType": "mel"
    },
    "9": {
        "annotation": "Rebuild Curve Options",
        "image1": "rebuildCurve.png",
        "imageOverlayLabel": "",
        "command": "RebuildCurveOptions",
        "sourceType": "mel"
    },
    "10": {
        "annotation": "Set up driver locators for a selected curve.",
        "image1": "locator.png",
        "imageOverlayLabel": "",
        "command": "from imp import reload\nfrom takTools.utils import curve as crvUtil; reload(crvUtil)\ncrv = cmds.filterExpand(cmds.ls(sl=True), sm=9)[0]\ncrvUtil.setupDriveLocators(crv)\n",
        "sourceType": "python"
    },
    "11": {
        "annotation": "Set up clusters for a selected curve.",
        "image1": "selectCluster.png",
        "imageOverlayLabel": "",
        "command": "from imp import reload\nfrom takTools.utils import curve as crvUtil; reload(crvUtil)\ncrvUtil.setupDriveClusters(cmds.ls(sl=True)[0])",
        "sourceType": "python"
    },
    "12": {
        "annotation": "Arrange selected object in grid",
        "image1": "arrangeObjs.png",
        "imageOverlayLabel": "",
        "command": "import takTools.common.tak_misc as tm\nimport imp\nimp.reload(tm)\n\ntm.arrangeObjectUI()",
        "sourceType": "python"
    },
    "13": {
        "annotation": "OBB_BoundingBox",
        "image1": "OBB_boundingBox.png",
        "imageOverlayLabel": "",
        "command": "from maya import cmds\nfrom takTools.rigging.OBB.api import OBB\nmeshes = cmds.ls(selection=True)\nif len(meshes) == 0:\n   raise RuntimeError(\"Nothing selected!\")\nfor mesh in meshes:\n    obbBoundBoxPnts = OBB.from_points(mesh)\n    obbCube = cmds.polyCube(ch=False, name=\"pointMethod_GEO\")[0]\n    cmds.xform(obbCube, matrix=obbBoundBoxPnts.matrix)\n    cmds.rename(obbCube, mesh + '_OBB')",
        "sourceType": "python"
    },
    "14": {
        "annotation": "OBB_Lattice",
        "image1": "OBB_lattice.png",
        "imageOverlayLabel": "",
        "command": "from maya import cmds\nfrom takTools.rigging.OBB.api import OBB\nmesh = cmds.ls(selection=True)\nif len(mesh) == 0:\n   raise RuntimeError(\"Nothing selected!\")\nobbBoundBoxPnts = OBB.from_points(mesh)\nlattice = cmds.lattice(dv=(2, 2, 2),\n                       objectCentered=True,\n                       name=\"pointMethod_LATTICE\t\")\ncmds.xform(lattice[1], matrix=obbBoundBoxPnts.matrix)\ncmds.xform(lattice[2], matrix=obbBoundBoxPnts.matrix)",
        "sourceType": "python"
    },
    "15": {
        "annotation": "Create sliding softMod control for selected geometry.",
        "image1": "softMod.png",
        "imageOverlayLabel": "",
        "command": "import takTools.common.tak_misc as tak_misc\nimport imp\nimp.reload(tak_misc)\n\ntak_misc.setupSoftModCtrl()",
        "sourceType": "python"
    },
    "16": {
        "annotation": "Convert soft selection to cluster.",
        "image1": "cluster.png",
        "imageOverlayLabel": "",
        "command": "import takTools.utils.cluster as clusterUtils\nimport imp\nimp.reload(clusterUtils)\n\nclusterUtils.softSelectionToCluster()",
        "sourceType": "python"
    },
    "17": {
        "annotation": "Convert mash to joints",
        "image1": "pythonFamily.png",
        "imageOverlayLabel": "",
        "command": "from maya import cmds\nfrom takTools.utils import MASH as mashUtil\nimport imp\nimp.reload(mashUtil)\n\nwaiter = cmds.ls(sl=True)[0]\njoints = mashUtil.buildJoints(waiter)\nmashUtil.buildSkinMesh(waiter, joints)",
        "sourceType": "python"
    },
    "18": {
        "annotation": "Build folding rig like a paper.",
        "image1": "commandButton.png",
        "imageOverlayLabel": "",
        "command": "source makeFoldingRig.mel;",
        "sourceType": "mel"
    },
    "19": {
        "annotation": "Set up auto swim feature for FK controllers.",
        "image1": "autoSwim.bmp",
        "imageOverlayLabel": "",
        "command": "import takTools.rigging.tak_autoSwim as tak_autoSwim\nimport imp\nimp.reload(tak_autoSwim)\ntak_autoSwim.UI()",
        "sourceType": "python"
    },
    "20": {
        "annotation": "Show js_rotationOrderWin",
        "image1": "rotate_M.png",
        "imageOverlayLabel": "",
        "command": "source \"js_rotationOrderWin.mel\";\njs_rotationOrderWin();",
        "sourceType": "mel"
    }
}