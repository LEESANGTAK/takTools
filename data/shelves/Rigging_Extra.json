{
    "order": "23",
    "tabName": "Rigging",
    "frameName": "Extra",
    "collapse": true,
    "shelfButtonInfos": [
        {
            "label": "Interactive Playback",
            "annotation": "Allows interaction with objects during playback",
            "image1": "interactivePlayback.png",
            "imageOverlayLabel": "",
            "command": "InteractivePlayback",
            "sourceType": "mel",
            "noDefaultPopup": true
        },
        {
            "label": "import takTools.fx.q...ation_manager.main()",
            "annotation": "import takTools.fx.q...ation_manager.main()",
            "image1": "qualoth_icon.png",
            "imageOverlayLabel": "",
            "command": "import takTools.fx.qualoth_simulation_manager as qualoth_simulation_manager\nimport imp\nimp.reload(qualoth_simulation_manager)\nqualoth_simulation_manager.main()",
            "sourceType": "python",
            "noDefaultPopup": true
        },
        {
            "label": "import takTools.rigg...hSetUp.nClothSetUp()",
            "annotation": "nCloth set up with skined geometry.",
            "image1": "nClothSetUp.png",
            "imageOverlayLabel": "",
            "command": "import takTools.rigging.tak_nClothSetUp as tak_nClothSetUp\nimport imp\nimp.reload(tak_nClothSetUp)\ntak_nClothSetUp.nClothSetUp()",
            "sourceType": "python",
            "noDefaultPopup": true
        },
        {
            "label": "import takTools.comm...)\ntak_misc.plcHldr()",
            "annotation": "Create locator to keep place for selected items.",
            "image1": "placeHolder.bmp",
            "imageOverlayLabel": "",
            "command": "import takTools.common.tak_misc as tak_misc\nimport imp\nimp.reload(tak_misc)\ntak_misc.plcHldr()",
            "sourceType": "python",
            "noDefaultPopup": true
        },
        {
            "label": "import takTools.comm...misc.crvFromSelsUi()",
            "annotation": "Create curve with selected objects.",
            "image1": "crvFromSels.bmp",
            "imageOverlayLabel": "",
            "command": "import takTools.common.tak_misc as tak_misc\nimport imp\nimp.reload(tak_misc)\ntak_misc.crvFromSelsUi()",
            "sourceType": "python",
            "noDefaultPopup": true
        },
        {
            "label": "from imp import relo...eFromSelectedEdges()",
            "annotation": "Extract a curve for selected polygon edges.",
            "image1": "polyEdgeToCurves.png",
            "imageOverlayLabel": "",
            "command": "from imp import reload\nfrom takTools.utils import curve as crvUtil; reload(crvUtil)\ncrvUtil.extractCurveFromSelectedEdges()",
            "sourceType": "python",
            "noDefaultPopup": true
        },
        {
            "label": "import takTools.util...().getTransform()))\n",
            "annotation": "Create curve from edge ring with an selected edge.",
            "image1": "curveFromEdgeRing.png",
            "imageOverlayLabel": "",
            "command": "import takTools.utils.mesh as meshUtil\nimport imp\nimp.reload(meshUtil)\nselEdge = pm.selected()[0]\nmeshUtil.curveFromEdgeRing(selEdge, \"{0}_crv\".format(selEdge.node().getTransform()))\n",
            "sourceType": "python",
            "noDefaultPopup": true
        },
        {
            "label": "CV Curve",
            "annotation": "CV Curve Tool",
            "image1": "curveCV.png",
            "imageOverlayLabel": "",
            "command": "CVCurveTool",
            "sourceType": "mel",
            "noDefaultPopup": true
        },
        {
            "label": "EPCurveTool...EPCurveTool",
            "annotation": "EP Curve Tool.",
            "image1": "curveEP.png",
            "imageOverlayLabel": "",
            "command": "EPCurveTool",
            "sourceType": "mel",
            "noDefaultPopup": true
        },
        {
            "label": "RebuildCurveOptions...RebuildCurveOptions",
            "annotation": "Rebuild Curve Options",
            "image1": "rebuildCurve.png",
            "imageOverlayLabel": "",
            "command": "RebuildCurveOptions",
            "sourceType": "mel",
            "noDefaultPopup": true
        },
        {
            "label": "from imp import relo...pDriveLocators(crv)\n",
            "annotation": "Set up driver locators for a selected curve.",
            "image1": "locator.png",
            "imageOverlayLabel": "",
            "command": "from imp import reload\nfrom takTools.utils import curve as crvUtil; reload(crvUtil)\ncrv = cmds.filterExpand(cmds.ls(sl=True), sm=9)[0]\ncrvUtil.setupDriveLocators(crv)\n",
            "sourceType": "python",
            "noDefaultPopup": true
        },
        {
            "label": "from imp import relo...cmds.ls(sl=True)[0])",
            "annotation": "Set up clusters for a selected curve.",
            "image1": "selectCluster.png",
            "imageOverlayLabel": "",
            "command": "from imp import reload\nfrom takTools.utils import curve as crvUtil; reload(crvUtil)\ncrvUtil.setupDriveClusters(cmds.ls(sl=True)[0])",
            "sourceType": "python",
            "noDefaultPopup": true
        },
        {
            "label": "import takTools.comm...tm.arrangeObjectUI()",
            "annotation": "Arrange selected object in grid",
            "image1": "arrangeObjs.png",
            "imageOverlayLabel": "",
            "command": "import takTools.common.tak_misc as tm\nimport imp\nimp.reload(tm)\n\ntm.arrangeObjectUI()",
            "sourceType": "python",
            "noDefaultPopup": true
        },
        {
            "label": "from maya import cmd...Cube, mesh + '_OBB')",
            "annotation": "OBB_BoundingBox",
            "image1": "OBB_boundingBox.png",
            "imageOverlayLabel": "",
            "command": "from maya import cmds\nfrom takTools.rigging.OBB.api import OBB\nmeshes = cmds.ls(selection=True)\nif len(meshes) == 0:\n   raise RuntimeError(\"Nothing selected!\")\nfor mesh in meshes:\n    obbBoundBoxPnts = OBB.from_points(mesh)\n    obbCube = cmds.polyCube(ch=False, name=\"pointMethod_GEO\")[0]\n    cmds.xform(obbCube, matrix=obbBoundBoxPnts.matrix)\n    cmds.rename(obbCube, mesh + '_OBB')",
            "sourceType": "python",
            "noDefaultPopup": true
        },
        {
            "label": "from maya import cmd...BoundBoxPnts.matrix)",
            "annotation": "OBB_Lattice",
            "image1": "OBB_lattice.png",
            "imageOverlayLabel": "",
            "command": "from maya import cmds\nfrom takTools.rigging.OBB.api import OBB\nmesh = cmds.ls(selection=True)\nif len(mesh) == 0:\n   raise RuntimeError(\"Nothing selected!\")\nobbBoundBoxPnts = OBB.from_points(mesh)\nlattice = cmds.lattice(dv=(2, 2, 2),\n                       objectCentered=True,\n                       name=\"pointMethod_LATTICE\t\")\ncmds.xform(lattice[1], matrix=obbBoundBoxPnts.matrix)\ncmds.xform(lattice[2], matrix=obbBoundBoxPnts.matrix)",
            "sourceType": "python",
            "noDefaultPopup": true
        },
        {
            "label": "import takTools.comm...c.setupSoftModCtrl()",
            "annotation": "Create sliding softMod control for selected geometry.",
            "image1": "softMod.png",
            "imageOverlayLabel": "",
            "command": "import takTools.common.tak_misc as tak_misc\nimport imp\nimp.reload(tak_misc)\n\ntak_misc.setupSoftModCtrl()",
            "sourceType": "python",
            "noDefaultPopup": true
        },
        {
            "label": "import takTools.util...SelectionToCluster()",
            "annotation": "Convert soft selection to cluster.",
            "image1": "cluster.png",
            "imageOverlayLabel": "",
            "command": "import takTools.utils.cluster as clusterUtils\nimport imp\nimp.reload(clusterUtils)\n\nclusterUtils.softSelectionToCluster()",
            "sourceType": "python",
            "noDefaultPopup": true
        },
        {
            "label": "from maya import cmd...Mesh(waiter, joints)",
            "annotation": "Convert mash to joints",
            "image1": "pythonFamily.png",
            "imageOverlayLabel": "",
            "command": "from maya import cmds\nfrom takTools.utils import MASH as mashUtil\nimport imp\nimp.reload(mashUtil)\n\nwaiter = cmds.ls(sl=True)[0]\njoints = mashUtil.buildJoints(waiter)\nmashUtil.buildSkinMesh(waiter, joints)",
            "sourceType": "python",
            "noDefaultPopup": true
        },
        {
            "label": "source makeFoldingRi... makeFoldingRig.mel;",
            "annotation": "Build folding rig like a paper.",
            "image1": "commandButton.png",
            "imageOverlayLabel": "",
            "command": "source makeFoldingRig.mel;",
            "sourceType": "mel",
            "noDefaultPopup": true
        },
        {
            "label": "import takTools.rigg...m)\ntak_autoSwim.UI()",
            "annotation": "Set up auto swim feature for FK controllers.",
            "image1": "autoSwim.bmp",
            "imageOverlayLabel": "",
            "command": "import takTools.rigging.tak_autoSwim as tak_autoSwim\nimport imp\nimp.reload(tak_autoSwim)\ntak_autoSwim.UI()",
            "sourceType": "python",
            "noDefaultPopup": true
        },
        {
            "label": "source \"js_rotationO..._rotationOrderWin();",
            "annotation": "Show js_rotationOrderWin",
            "image1": "rotate_M.png",
            "imageOverlayLabel": "",
            "command": "source \"js_rotationOrderWin.mel\";\njs_rotationOrderWin();",
            "sourceType": "mel",
            "noDefaultPopup": true
        }
    ]
}