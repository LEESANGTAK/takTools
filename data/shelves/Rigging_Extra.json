{
    "order": "23", 
    "tabName": "Rigging", 
    "frameName": "Extra", 
    "collapse": false, 
    "shelfButtonInfos": [
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "mel", 
            "label": "Interactive Playback", 
            "command": "InteractivePlayback", 
            "image1": "interactivePlayback.png", 
            "annotation": "Allows interaction with objects during playback"
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "python", 
            "label": "import takTools.fx.q...ation_manager.main()", 
            "command": "import takTools.fx.qualoth_simulation_manager as qualoth_simulation_manager\nimport imp\nimp.reload(qualoth_simulation_manager)\nqualoth_simulation_manager.main()", 
            "image1": "qualoth_icon.png", 
            "annotation": "import takTools.fx.q...ation_manager.main()"
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "python", 
            "label": "import takTools.rigg...hSetUp.nClothSetUp()", 
            "command": "import takTools.rigging.tak_nClothSetUp as tak_nClothSetUp\nimport imp\nimp.reload(tak_nClothSetUp)\ntak_nClothSetUp.nClothSetUp()", 
            "image1": "nClothSetUp.png", 
            "annotation": "nCloth set up with skined geometry."
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "python", 
            "label": "import takTools.comm...)\ntak_misc.plcHldr()", 
            "command": "import takTools.common.tak_misc as tak_misc\nimport imp\nimp.reload(tak_misc)\ntak_misc.plcHldr()", 
            "image1": "placeHolder.bmp", 
            "annotation": "Create locator to keep place for selected items."
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "python", 
            "label": "import takTools.comm...misc.crvFromSelsUi()", 
            "command": "import takTools.common.tak_misc as tak_misc\nimport imp\nimp.reload(tak_misc)\ntak_misc.crvFromSelsUi()", 
            "image1": "crvFromSels.bmp", 
            "annotation": "Create curve with selected objects."
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "python", 
            "label": "from imp import relo...eFromSelectedEdges()", 
            "command": "from imp import reload\nfrom takTools.utils import curve as crvUtil; reload(crvUtil)\ncrvUtil.extractCurveFromSelectedEdges()", 
            "image1": "polyEdgeToCurves.png", 
            "annotation": "Extract a curve for selected polygon edges."
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "python", 
            "label": "import takTools.util...().getTransform()))\n", 
            "command": "import takTools.utils.mesh as meshUtil\nimport imp\nimp.reload(meshUtil)\nselEdge = pm.selected()[0]\nmeshUtil.curveFromEdgeRing(selEdge, \"{0}_crv\".format(selEdge.node().getTransform()))\n", 
            "image1": "curveFromEdgeRing.png", 
            "annotation": "Create curve from edge ring with an selected edge."
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "mel", 
            "label": "CV Curve", 
            "command": "CVCurveTool", 
            "image1": "curveCV.png", 
            "annotation": "CV Curve Tool"
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "mel", 
            "label": "EP Curve", 
            "command": "EPCurveTool", 
            "image1": "curveEP.png", 
            "annotation": "EP Curve Tool."
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "mel", 
            "label": "RebuildCurveOptions...RebuildCurveOptions", 
            "command": "RebuildCurveOptions", 
            "image1": "rebuildCurve.png", 
            "annotation": "Rebuild Curve Options"
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "python", 
            "label": "from imp import relo...pDriveLocators(crv)\n", 
            "command": "from imp import reload\nfrom takTools.utils import curve as crvUtil; reload(crvUtil)\ncrv = cmds.filterExpand(cmds.ls(sl=True), sm=9)[0]\ncrvUtil.setupDriveLocators(crv)\n", 
            "image1": "locator.png", 
            "annotation": "Set up driver locators for a selected curve."
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "python", 
            "label": "from imp import relo...cmds.ls(sl=True)[0])", 
            "command": "from imp import reload\nfrom takTools.utils import curve as crvUtil; reload(crvUtil)\ncrvUtil.setupDriveClusters(cmds.ls(sl=True)[0])", 
            "image1": "selectCluster.png", 
            "annotation": "Set up clusters for a selected curve."
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "python", 
            "label": "import takTools.comm...tm.arrangeObjectUI()", 
            "command": "import takTools.common.tak_misc as tm\nimport imp\nimp.reload(tm)\n\ntm.arrangeObjectUI()", 
            "image1": "arrangeObjs.png", 
            "annotation": "Arrange selected object in grid"
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "python", 
            "label": "from maya import cmd...Cube, mesh + '_OBB')", 
            "command": "from maya import cmds\nfrom takTools.rigging.OBB.api import OBB\nmeshes = cmds.ls(selection=True)\nif len(meshes) == 0:\n   raise RuntimeError(\"Nothing selected!\")\nfor mesh in meshes:\n    obbBoundBoxPnts = OBB.from_points(mesh)\n    obbCube = cmds.polyCube(ch=False, name=\"pointMethod_GEO\")[0]\n    cmds.xform(obbCube, matrix=obbBoundBoxPnts.matrix)\n    cmds.rename(obbCube, mesh + '_OBB')", 
            "image1": "OBB_boundingBox.png", 
            "annotation": "OBB_BoundingBox"
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "python", 
            "label": "from maya import cmd...BoundBoxPnts.matrix)", 
            "command": "from maya import cmds\nfrom takTools.rigging.OBB.api import OBB\nmesh = cmds.ls(selection=True)\nif len(mesh) == 0:\n   raise RuntimeError(\"Nothing selected!\")\nobbBoundBoxPnts = OBB.from_points(mesh)\nlattice = cmds.lattice(dv=(2, 2, 2),\n                       objectCentered=True,\n                       name=\"pointMethod_LATTICE\t\")\ncmds.xform(lattice[1], matrix=obbBoundBoxPnts.matrix)\ncmds.xform(lattice[2], matrix=obbBoundBoxPnts.matrix)", 
            "image1": "OBB_lattice.png", 
            "annotation": "OBB_Lattice"
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "python", 
            "label": "import takTools.comm...c.setupSoftModCtrl()", 
            "command": "import takTools.common.tak_misc as tak_misc\nimport imp\nimp.reload(tak_misc)\n\ntak_misc.setupSoftModCtrl()", 
            "image1": "softMod.png", 
            "annotation": "Create sliding softMod control for selected geometry."
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "python", 
            "label": "import takTools.util...SelectionToCluster()", 
            "command": "import takTools.utils.cluster as clusterUtils\nimport imp\nimp.reload(clusterUtils)\n\nclusterUtils.softSelectionToCluster()", 
            "image1": "cluster.png", 
            "annotation": "Convert soft selection to cluster."
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "python", 
            "label": "from maya import cmd...Mesh(waiter, joints)", 
            "command": "from maya import cmds\nfrom takTools.utils import MASH as mashUtil\nimport imp\nimp.reload(mashUtil)\n\nwaiter = cmds.ls(sl=True)[0]\njoints = mashUtil.buildJoints(waiter)\nmashUtil.buildSkinMesh(waiter, joints)", 
            "image1": "pythonFamily.png", 
            "annotation": "Convert mash to joints"
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "mel", 
            "label": "source makeFoldingRi... makeFoldingRig.mel;", 
            "command": "source makeFoldingRig.mel;", 
            "image1": "commandButton.png", 
            "annotation": "Build folding rig like a paper."
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "python", 
            "label": "import takTools.rigg...m)\ntak_autoSwim.UI()", 
            "command": "import takTools.rigging.tak_autoSwim as tak_autoSwim\nimport imp\nimp.reload(tak_autoSwim)\ntak_autoSwim.UI()", 
            "image1": "autoSwim.bmp", 
            "annotation": "Set up auto swim feature for FK controllers."
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "mel", 
            "label": "source \"js_rotationO..._rotationOrderWin();", 
            "command": "source \"js_rotationOrderWin.mel\";\njs_rotationOrderWin();", 
            "image1": "rotate_M.png", 
            "annotation": "Show js_rotationOrderWin"
        }
    ]
}