{
    "tabName": "Rigging", 
    "frameName": "Model", 
    "order": "23", 
    "shelfButtonInfos": [
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "mel", 
            "label": "abSymMesh;...abSymMesh;", 
            "command": "abSymMesh;", 
            "image1": "symmetrize.png", 
            "annotation": "abSymMesh;"
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "python", 
            "label": "import takTools.comm...ithSelectedTexture()", 
            "command": "import takTools.common.tak_misc as tak_misc\nimport imp\nimp.reload(tak_misc)\ntak_misc.assignLambertWithSelectedTexture()", 
            "image1": "lambertWithSelectedTexture.png", 
            "annotation": "Assign lambert with a selected texture."
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "python", 
            "label": "import takTools.comm...k_misc.solidColMat()", 
            "command": "import takTools.common.tak_misc as tak_misc\nimport imp\nimp.reload(tak_misc)\ntak_misc.solidColMat()", 
            "image1": "solColorMat.bmp", 
            "annotation": "Assign solid color material with grabed color."
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "python", 
            "label": "pm.mel.hyperShadePan...ateShadingNetwork\");", 
            "command": "pm.mel.hyperShadePanelMenuCommand(\"hyperShadePanel1\", \"duplicateShadingNetwork\");", 
            "image1": "out_lambert.png", 
            "annotation": "Duplicate selected shader network."
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "python", 
            "label": "import takTools.comm...sc.dupMatAndAssign()", 
            "command": "import takTools.common.tak_misc as tak_misc\nimport imp\nimp.reload(tak_misc)\ntak_misc.dupMatAndAssign()", 
            "image1": "dupMatAssign.png", 
            "annotation": "Duplicate material and assign duplicated material."
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "python", 
            "label": "import takTools.comm...)\ntak_misc.copyMat()", 
            "command": "import takTools.common.tak_misc as tak_misc\nimport imp\nimp.reload(tak_misc)\ntak_misc.copyMat()", 
            "image1": "copyMat.bmp", 
            "annotation": "Assign the material of first selection to the others"
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "python", 
            "label": "import takTools.comm...sc.copyTexRenameUI()", 
            "command": "import takTools.common.tak_misc as tak_misc\nimport imp\nimp.reload(tak_misc)\ntak_misc.copyTexRenameUI()", 
            "image1": "copyTexture.png", 
            "annotation": "Copy selected objects texture"
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "python", 
            "label": "import takTools.comm...isc.cutGeoWithJnts()", 
            "command": "import takTools.common.tak_misc as tak_misc\nimport imp\nimp.reload(tak_misc)\ntak_misc.cutGeoWithJnts()", 
            "image1": "cutGeoWithJoints.png", 
            "annotation": "\tCut selected geometry with selected joints.\n\tUsing 'js_cutPlane.mel' script.\n\tSelect first joints and geometry last."
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "mel", 
            "label": "source js_cutPlane;\n...js_cutPlane_create;\n", 
            "command": "source js_cutPlane;\njs_cutPlane_create;\n", 
            "image1": "addPlane.bmp", 
            "annotation": "Add plane for cutting polygonal geometry"
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "mel", 
            "label": "source js_cutPlane;\n...\njs_cutPlane_cut 1;\n", 
            "command": "source js_cutPlane;\njs_cutPlane_cut 1;\n", 
            "image1": "cutPlaneDone.bmp", 
            "annotation": "Cut selected object with planes"
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "mel", 
            "label": "SculptGeometryTool...SculptGeometryTool", 
            "command": "SculptGeometryTool", 
            "image1": "putty.png", 
            "annotation": "Sculpt a geometry object."
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "mel", 
            "label": "SetMeshGrabTool...SetMeshGrabTool", 
            "command": "SetMeshGrabTool", 
            "image1": "Grab.png", 
            "annotation": "Grab Tool"
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "mel", 
            "label": "SetMeshEraseTool...SetMeshEraseTool", 
            "command": "SetMeshEraseTool", 
            "image1": "Erase.png", 
            "annotation": "Erase Target Tool"
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "mel", 
            "label": "SetMeshSmoothTargetT...MeshSmoothTargetTool", 
            "command": "SetMeshSmoothTargetTool", 
            "image1": "SmoothTarget.png", 
            "annotation": "Smooth Target Tool"
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "python", 
            "label": "import takTools.comm...tak_misc.ranColLam()", 
            "command": "import takTools.common.tak_misc as tak_misc\nimport imp\nimp.reload(tak_misc)\ntak_misc.ranColLam()", 
            "image1": "ranColLam.bmp", 
            "annotation": "Assign random color lamber."
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "python", 
            "label": "import takTools.comm...tak_misc.copyUvMat()", 
            "command": "import takTools.common.tak_misc as tak_misc\nimport imp\nimp.reload(tak_misc)\ntak_misc.copyUvMat()", 
            "image1": "copyUvMat.png", 
            "annotation": "Copy all uv sets and material from source to target."
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "python", 
            "label": "import pymel.core as...RiggedMesh(src, trg)", 
            "command": "import pymel.core as pm\nimport takTools.common.tak_misc as tak_misc\n\nsels = pm.ls(sl=True)\nsrc = sels[0]\ntrg = sels[1]\n\ntak_misc.copyUvRiggedMesh(src, trg)", 
            "image1": "copyUvRiggedMesh.png", 
            "annotation": "Copy source mesh's uv to target mesh that rigged"
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "mel", 
            "label": "FileTextureManager;...FileTextureManager;", 
            "command": "FileTextureManager;", 
            "image1": "texManger.bmp", 
            "annotation": "File Texture Manager"
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "mel", 
            "label": "expandPolyGroupSelec...1\",\"0\",\"0\",\"0\",\"0\"};", 
            "command": "expandPolyGroupSelection; doPerformPolyReduceArgList 3 {\"1\",\"0\",\"0\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"0.5\",\"0.5\",\"0.5\",\"0.5\",\"0.5\",\"0.5\",\"0\",\"0.01\",\"0\",\"1\",\"0\",\"0.0\",\"1\",\"1\",\"\",\"1\",\"1\",\"50\",\"0\",\"0\",\"1\",\"0\",\"0\",\"0\",\"0\"};", 
            "image1": "polyReduce.png", 
            "annotation": "Reduce"
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "mel", 
            "label": "polyRemesh -maxEdgeL...-interpolationType 2", 
            "command": "polyRemesh -maxEdgeLength 1 -useRelativeValues 1 -collapseThreshold 20 -smoothStrength 0 -tessellateBorders 1 -interpolationType 2", 
            "image1": "polyRemesh.png", 
            "annotation": "Remesh"
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "mel", 
            "label": "polyRetopo -construc...aceCountTolerance 10", 
            "command": "polyRetopo -constructionHistory 1 -replaceOriginal 1 -preserveHardEdges 0 -topologyRegularity 1.0 -faceUniformity 0 -anisotropy 0.75 -targetFaceCount 1000 -targetFaceCountTolerance 10", 
            "image1": "polyRetopo.png", 
            "annotation": "Retopologize"
        }
    ]
}