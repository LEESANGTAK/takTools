{
    "tabName": "Misc", 
    "frameName": "Misc", 
    "order": "11", 
    "shelfButtonInfos": [
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "python", 
            "label": "from takTools.utils ...l.cleanupMayaScene()", 
            "command": "from takTools.utils import globalUtil;import imp;imp.reload(globalUtil); globalUtil.cleanupMayaScene()", 
            "image1": "cleanupScene.png", 
            "annotation": "Remove unknown nodes, plugins, callbacks, scriptjobs"
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "python", 
            "label": "from takTools.utils ....clearOutputWindow()", 
            "command": "from takTools.utils import system as sysUtil\nimport imp\nimp.reload(sysUtil)\n\nsysUtil.clearOutputWindow()", 
            "image1": "menuIconWindow.png", 
            "annotation": "Clear output window"
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "python", 
            "label": "import takTools.pipe...rceBrowser.showUI()\n", 
            "command": "import takTools.pipeline.takMayaResourceBrowser as tmrb\n\ntmrb.TakMayaResourceBrowser.showUI()\n", 
            "image1": "imageDisplay.png", 
            "annotation": "Search maya resource images."
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "python", 
            "label": "from takTools.common...akerGUI()\ngui.show()", 
            "command": "from takTools.common import iconMaker\nimport imp\nimp.reload(iconMaker)\n\ngui = iconMaker.IconMakerGUI()\ngui.show()", 
            "image1": "UVEditorSnapshot.png", 
            "annotation": "Create an icon image"
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "python", 
            "label": "import takTools.pipe...k_saveSceneInfo.ui()", 
            "command": "import takTools.pipeline.tak_saveSceneInfo as tak_saveSceneInfo\nimport imp\nimp.reload(tak_saveSceneInfo)\ntak_saveSceneInfo.ui()", 
            "image1": "saveSceneInfo.png", 
            "annotation": "Save specific scene information as a file."
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "python", 
            "label": "import takTools.pipe..._prjFolderSetup.UI()", 
            "command": "import takTools.pipeline.tak_prjFolderSetup as tak_prjFolderSetup\nimport imp\nimp.reload(tak_prjFolderSetup)\ntak_prjFolderSetup.UI()", 
            "image1": "prjFldSet.bmp", 
            "annotation": "Create folder structure."
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "python", 
            "label": "import takTools.pipe...ef)\ntak_fileRef.UI()", 
            "command": "import takTools.pipeline.tak_fileRef as tak_fileRef\nimport imp\nimp.reload(tak_fileRef)\ntak_fileRef.UI()", 
            "image1": "fileRef.png", 
            "annotation": "Load or reload or delete references."
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "python", 
            "label": "import takTools.comm...misc.renameRefNode()", 
            "command": "import takTools.common.tak_misc as tak_misc\nimport imp\nimp.reload(tak_misc)\ntak_misc.renameRefNode()", 
            "image1": "renameRefNode.bmp", 
            "annotation": "Rename refrence node and namespace."
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "python", 
            "label": "import takTools.comm...tak_misc.lineWidth()", 
            "command": "import takTools.common.tak_misc as tak_misc\nimport imp\nimp.reload(tak_misc)\ntak_misc.lineWidth()", 
            "image1": "lineWidth.bmp", 
            "annotation": "Change line width."
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "python", 
            "label": "import takTools.util...ls.shakeCamera(cam)\n", 
            "command": "import takTools.utils.camera as camUtils\nimport imp\nimp.reload(camUtils)\n\ncam = pm.selected()[0]\ncamUtils.shakeCamera(cam)\n", 
            "image1": "Camera.png", 
            "annotation": "Shake selected camera."
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "python", 
            "label": "import takTools.comm...)\ntak_misc.bakeCam()", 
            "command": "import takTools.common.tak_misc as tak_misc\nimport imp\nimp.reload(tak_misc)\ntak_misc.bakeCam()", 
            "image1": "bakeCam.png", 
            "annotation": "Bake selected camera"
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "python", 
            "label": "import takTools.pipe...tak_mayaCamToAE.ui()", 
            "command": "import takTools.pipeline.tak_mayaCamToAE as tak_mayaCamToAE\nimport imp\nimp.reload(tak_mayaCamToAE)\ntak_mayaCamToAE.ui()", 
            "image1": "mayaCamToAE.png", 
            "annotation": "Bake selected camera to use in AE."
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "python", 
            "label": "import takTools.pipe...ToMax.mayaCamToMax()", 
            "command": "import takTools.pipeline.tak_mayaCamToMax as tak_mayaCamToMax\nimport imp\nimp.reload(tak_mayaCamToMax)\ntak_mayaCamToMax.mayaCamToMax()", 
            "image1": "mayaCamToMax.png", 
            "annotation": "Export selected camera for using in 3ds Max."
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "python", 
            "label": "import takTools.comm..._misc.followingCam()", 
            "command": "import takTools.common.tak_misc as tak_misc\nimport imp\nimp.reload(tak_misc)\ntak_misc.followingCam()", 
            "image1": "followingCam.bmp", 
            "annotation": "Create camera following selected object."
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "python", 
            "label": "import takTools.comm...k_misc.trackingLoc()", 
            "command": "import takTools.common.tak_misc as tak_misc\nimport imp\nimp.reload(tak_misc)\ntak_misc.trackingLoc()", 
            "image1": "trackingLoc.bmp", 
            "annotation": "Create locators per frame with selected object."
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "mel", 
            "label": "source ikas_renderVi...ce ikas_renderViewBr", 
            "command": "source ikas_renderViewBr", 
            "image1": "ikasRenderView.bmp", 
            "annotation": "Render viewport."
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "python", 
            "label": "import takTools.comm...c.attachSpecSphere()", 
            "command": "import takTools.common.tak_misc as tak_misc\nimport imp\nimp.reload(tak_misc)\ntak_misc.attachSpecSphere()", 
            "image1": "specSphere.png", 
            "annotation": "Attach specular sphere to selected vertex(s) or selected two edges."
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "python", 
            "label": "import takTools.pipe...ak_batchPB.batchPB()", 
            "command": "import takTools.pipeline.tak_batchPB as tak_batchPB\nimport imp\nimp.reload(tak_batchPB)\ntak_batchPB.batchPB()", 
            "image1": "batchPB.png", 
            "annotation": "Batch playblast."
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "python", 
            "label": "import takTools.pipe...)\nrenLyrSaveObj.UI()", 
            "command": "import takTools.pipeline.tak_saveRenderLayer as tak_saveRenderLayer\nimport imp\nimp.reload(tak_saveRenderLayer)\nrenLyrSaveObj = tak_saveRenderLayer.SaveRenderLayer()\nrenLyrSaveObj.UI()", 
            "image1": "saveRenderLayer.png", 
            "annotation": "Save and load render layer set up."
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "python", 
            "label": "import takTools.pipe...itMayaAsciiFile.ui()", 
            "command": "import takTools.pipeline.tak_editMayaAsciiFile as tak_editMayaAsciiFile\nimport imp\nimp.reload(tak_editMayaAsciiFile)\ntak_editMayaAsciiFile.ui()", 
            "image1": "editMayaAscii.png", 
            "annotation": "Edit maya ascii file contents."
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "python", 
            "label": "from imp import relo....fbxCleanerUI.show()", 
            "command": "from imp import reload\nimport takFBXExporter as tfbxe; reload(tfbxe)\n\ntfbxe.gui.fbxCleanerUI.show()", 
            "image1": "fbxReview.png", 
            "annotation": "Clean up a fbx file."
        }, 
        {
            "imageOverlayLabel": "", 
            "noDefaultPopup": true, 
            "sourceType": "python", 
            "label": "from takTools.utils ...d(dfc)\n\ndfc.showUI()", 
            "command": "from takTools.utils import drawingFuncCurves as dfc\nimport imp\nimp.reload(dfc)\n\ndfc.showUI()", 
            "image1": "sineCurveProfile.png", 
            "annotation": "from takTools.utils import drawingFuncCurves as dfc\nimport imp\nimp.reload(dfc)\n..."
        }
    ]
}