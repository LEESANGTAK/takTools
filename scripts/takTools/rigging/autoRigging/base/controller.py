import pymel.core as pm

from functools import partial

from . import enums
from ..utils import curve as curveUtil


class Controller():
    curveCommands = {
        'pentagon': [partial(pm.curve, d=1, p=[[1, 0, -1.022278], [-1, 0, -1.022278], [-1, 0, 0.743656], [0, 0, 1.423606], [1, 0, 0.743656], [1, 0, -1.022278]], k=[0, 1, 2, 3, 4, 5])],
        'circleX': [partial(pm.circle, normal=(1, 0, 0), ch=False)],
        'circleY': [partial(pm.circle, normal=(0, 1, 0), ch=False)],
        'circleZ': [partial(pm.circle, normal=(0, 0, 1), ch=False)],
        'locator': [partial(pm.curve, d=1, p=[[0.0, 0.99266615978157735, 0.0], [0.0, -0.99266615978157735, 0.0], [0.0, 0.0, 0.0], [-0.99266615978157735, 0.0, 0.0], [0.99266615978157735, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.99266615978157735], [0.0, 0.0, -0.99266615978157735]], k=[0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0])],
        'square': [partial(pm.curve, d=1, p=[(-1, -1, 0), (1, -1, 0), (1, 1, 0), (-1, 1, 0), (-1, -1, 0)], k=[0, 1, 2, 3, 4])],
        'squareRounded': [partial(pm.curve, d=3, p=[(-1.0000000004369547, 0.77777777811763138, 0.0), (-1.0000000004369547, 0.83333333369746221, 0.0), (-0.94444444485712398, 0.94444444485712398, 0.0), (-0.83333333369746221, 1.0000000004369547, 0.0), (-0.77777777811763138, 1.0000000004369547, 0.0), (0.0, 1.0000000004369547, 0.0), (0.77777777811763138, 1.0000000004369547, 0.0), (0.83333333369746221, 1.0000000004369547, 0.0), (0.94444444485712398, 0.94444444485712398, 0.0), (1.0000000004369547, 0.83333333369746221, 0.0), (1.0000000004369547, 0.77777777811763138, 0.0), (1.0000000004369547, -0.77777777811763138, 0.0), (1.0000000004369547, -0.83333333369746221, 0.0), (0.94444444485712398, -0.94444444485712398, 0.0), (0.83333333369746221, -1.0000000004369547, 0.0), (0.77777777811763138, -1.0000000004369547, 0.0), (0.0, -1.0000000004369547, 0.0), (-0.77777777811763138, -1.0000000004369547, 0.0), (-0.83333333369746221, -1.0000000004369547, 0.0), (-0.94444444485712398, -0.94444444485712398, 0.0), (-1.0000000004369547, -0.83333333369746221, 0.0), (-1.0000000004369547, -0.77777777811763138, 0.0), (-1.0000000004369547, 0.0, 0.0), (-1.0000000004369547, 0.77777777811763138, 0.0)], k=(0.0, 0.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 21.0, 21.0))],
        'sphere': [partial(pm.curve, d=3, p=[[5.3290705182007512e-17, 6.123233995736766e-17, -1.0], [-0.26120387496374148, 6.123233995736766e-17, -1.0], [-0.78361162489122427, 4.7982373409884707e-17, -0.78361162489122427], [-1.1081941875543879, 1.9663354616187859e-32, -3.2112695072372299e-16], [-0.78361162489122449, -4.7982373409884701e-17, 0.78361162489122405], [-3.3392053635905195e-16, -6.7857323231109146e-17, 1.1081941875543881], [0.78361162489122382, -4.7982373409884713e-17, 0.78361162489122438], [1.1081941875543879, -3.6446300679047921e-32, 5.9521325992805852e-16], [0.78361162489122504, 4.7982373409884682e-17, -0.78361162489122382], [0.26120387496374164, 6.123233995736766e-17, -0.99999999999999978], [8.8817841970012528e-17, 6.123233995736766e-17, -0.99999999999999989]], k=(0.0, 0.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 8.0, 8.0)),
                   partial(pm.curve, d=3, p=[[5.3290705182007512e-17, 1.0, 0.0], [-0.26120387496374148, 1.0, 0.0], [-0.78361162489122427, 0.78361162489122427, 0.0], [-1.1081941875543879, 3.2112695072372299e-16, 0.0], [-0.78361162489122449, -0.78361162489122405, 0.0], [-3.3392053635905195e-16, -1.1081941875543881, 0.0], [
                           0.78361162489122382, -0.78361162489122438, 0.0], [1.1081941875543879, -5.9521325992805852e-16, 0.0], [0.78361162489122504, 0.78361162489122382, 0.0], [0.26120387496374164, 0.99999999999999978, 0.0], [8.8817841970012528e-17, 0.99999999999999989, 0.0]], k=(0.0, 0.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 8.0, 8.0)),
                   partial(pm.curve, d=3, p=[[1.9721522630525296e-33, 1.0, -5.3290705182007512e-17], [-1.5994124469961577e-17, 1.0, 0.26120387496374148], [-4.7982373409884707e-17, 0.78361162489122427, 0.78361162489122427], [-6.7857323231109134e-17, 3.2112695072372299e-16, 1.1081941875543879], [-4.7982373409884731e-17, -0.78361162489122405, 0.78361162489122449], [-2.0446735801084019e-32, -1.1081941875543881, 3.3392053635905195e-16], [4.7982373409884682e-17, -0.78361162489122438, -0.78361162489122382], [6.7857323231109134e-17, -5.9521325992805852e-16, -1.1081941875543879], [4.7982373409884762e-17, 0.78361162489122382, -0.78361162489122504], [1.5994124469961583e-17, 0.99999999999999978, -0.26120387496374164], [4.9303806576313241e-33, 0.99999999999999989, -8.8817841970012528e-17]], k=(0.0, 0.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 8.0, 8.0))],
        'cube': [partial(pm.curve, d=1, p=[(-1, 1, 1), (1, 1, 1), (1, 1, -1), (-1, 1, -1), (-1, 1, 1), (-1, -1, 1), (-1, -1, -1), (1, -1, -1), (1, -1, 1), (-1, -1, 1), (1, -1, 1), (1, 1, 1), (1, 1, -1), (1, -1, -1), (-1, -1, -1), (-1, 1, -1)], k=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])],
        'cloth': [partial(pm.curve, d=1, p=[[-1, 6, 0], [0, 5, 0], [1, 6, 0], [2, 6, 0], [4, 4, 0], [3, 3, 0], [2, 4, 0], [2, 1, 0], [-2, 1, 0], [-2, 4, 0], [-3, 3, 0], [-4, 4, 0], [-2, 6, 0], [-1, 6, 0]])],
        'gear': [partial(pm.curve, d=3, p=[[0.36589275643190788, -2.0408077971202743e-06, 0.0], [0.36589275643190788, 0.066658905066453847, 0.0], [0.34805936158046424, 0.12914272554224085, 0.0], [0.31691745092461332, 0.18297352095965108, 0.0], [0.32982339037080916, 0.19042448106665821, 0.0], [0.42016612804034642, 0.24258187240882675, 0.0], [0.43307206748654231, 0.25003283251583436, 0.0], [0.38917102648517926, 0.3259051684616634, 0.0], [0.32590598478478217, 0.38917021016206016, 0.0], [0.25003283251583447, 0.4330720674865422, 0.0], [0.24258141890051846, 0.42016612804034631, 0.0], [0.1904208529593738, 0.32982339037080882, 0.0], [0.18296943934405777, 0.31691745092461299, 0.0], [0.12914354186535973, 0.34805936158046391, 0.0], [0.066655639773978939, 0.365892756431908, 0.0], [-2.0408077968871564e-06, 0.365892756431908, 0.0], [-2.0408077968871564e-06, 0.38079340682265889, 0.0], [-2.0408077968871564e-06, 0.48509930062986206, 0.0], [-2.0408077968871564e-06, 0.49999995102061295, 0.0], [-0.091089007040231817, 0.49999995102061295, 0.0], [-0.17647967055027494, 0.47562944063450113, 0.0], [-0.25003283251583469, 0.4330720674865422, 0.0], [-0.24258178170716541, 0.42016612804034631, 0.0], [-0.19042375544520174, 0.32982339037080882, 0.0], [-0.18297270463653242, 0.31691745092461299, 0.0], [-0.23849328890968227, 0.28479023826447297, 0.0], [-0.28479023826447353, 0.23849328890968163, 0.0], [-0.3169166346014945, 0.18296943934405777, 0.0], [-0.3298225740476905, 0.1904208529593738, 0.0], [-0.42016531171722776, 0.24258141890051832, 0.0], [-0.43307125116342365, 0.25003283251583436, 0.0], [-0.47562944063450124, 0.17647967055027458, 0.0], [-0.4999999510206129, 0.091084925424638155, 0.0], [-0.4999999510206129, -2.0408077971202743e-06, 0.0], [-0.48509920992820016, -2.0408077971202743e-06, 0.0], [-0.3807926812012018, -2.0408077971202743e-06, 0.0], [-0.36589194010878912, -2.0408077971202743e-06, 0.0], [-0.36589194010878912, -0.066662986682047162, 0.0], [-0.34805936158046419, -0.12914680715783416, 0.0], [-0.3169166346014945, -0.182973520959652, 0.0], [-0.3298225740476905, -0.19042448106665916, 0.0], [-0.42016531171722776, -0.2425818724088277, 0.0], [-0.43307125116342365, -0.25003283251583486, 0.0], [-0.38917021016206038, -0.32590925007725718, 0.0], [-0.32590925007725674, -0.38916694486958558, 0.0], [-0.25003609780830954, -0.43307614910213643, 0.0], [-0.25003573500166265, -0.43307614910213643, 0.0], [-0.25003319532248164, -0.43307614910213643, 0.0], [-0.25003283251583469, -0.43307614910213643, 0.0], [-0.24258178170716541, -0.42016975614763213, 0.0], [-0.19042375544520174, -0.32982384387911723, 0.0], [-0.18297270463653242, -0.31691745092461343, 0.0], [-0.12914680715783453, -0.34806344319605814, 0.0], [-0.066658905066453972, -0.36589683804750223, 0.0], [-2.0408077968871564e-06, -0.36589683804750223, 0.0], [-2.0408077968871564e-06, -0.38079703492994471, 0.0], [-2.0408077968871564e-06, -0.48509975413817047, 0.0], [-2.0408077968871564e-06, -0.49999995102061295, 0.0], [0.09108574174775691, -0.49999995102061295, 0.0], [0.17647640525780015, -0.47562944063450163, 0.0], [0.25003283251583447, -0.43307614910213643, 0.0], [0.24258141890051846, -0.42016975614763213, 0.0], [0.1904208529593738, -0.32982384387911723, 0.0], [0.18296943934405777, -0.31691745092461343, 0.0], [0.23849410523280098, -0.28479023826447342, 0.0], [0.28478697297199862, -0.23849737052527589, 0.0], [0.31691745092461332, -0.182973520959652, 0.0], [0.32982339037080916, -0.19042448106665916, 0.0], [0.42016612804034642, -0.2425818724088277, 0.0], [0.43307206748654231, -0.25003283251583486, 0.0], [0.47563025695762001, -0.17648375216586881, 0.0], [0.49999995102061284, -0.091089007040231457, 0.0], [0.49999995102061284, -2.0408077971202743e-06, 0.0], [0.48509930062986167, -2.0408077971202743e-06, 0.0], [0.38079340682265889, -2.0408077971202743e-06, 0.0], [0.36589275643190788, -2.0408077971202743e-06, 0.0]], k=(0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 2.0, 2.0, 2.0, 3.0, 3.0, 3.0, 4.0, 4.0, 4.0, 5.0, 5.0, 5.0, 6.0, 6.0, 6.0, 7.0, 7.0, 7.0, 8.0, 8.0, 8.0, 9.0, 9.0, 9.0, 10.0, 10.0, 10.0, 11.0, 11.0, 11.0, 12.0, 12.0, 12.0, 13.0, 13.0, 13.0, 14.0, 14.0, 14.0, 15.0, 15.0, 15.0, 16.0, 16.0, 16.0, 17.0, 17.0, 17.0, 18.0, 18.0, 18.0, 19.0, 19.0, 19.0, 20.0, 20.0, 20.0, 21.0, 21.0, 21.0, 22.0, 22.0, 22.0, 23.0, 23.0, 23.0, 24.0, 24.0, 24.0, 25.0, 25.0, 25.0)),
                 partial(pm.curve, d=3, p=[[-2.0408077968871564e-06, -0.21854398453452986, 0.0], [-0.1206962302328989, -0.21854398453452986, 0.0], [-0.21854316821141118, -0.12069704655601754, 0.0], [-0.21854316821141118, -2.0408077971202743e-06, 0.0], [-0.21854316821141118, 0.12069296494042377, 0.0], [-0.1206962302328989, 0.21853990291893702, 0.0], [-2.0408077968871564e-06, 0.21853990291893702, 0.0], [0.12069704655601754, 0.21853990291893702, 0.0], [0.21854398453453011, 0.12069296494042377, 0.0], [0.21854398453453011, -2.0408077971202743e-06, 0.0], [0.21854398453453011, -0.12069704655601754, 0.0], [0.12069704655601754, -0.21854398453452986, 0.0], [-2.0408077968871564e-06, -0.21854398453452986, 0.0]], k=(0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 2.0, 2.0, 2.0, 3.0, 3.0, 3.0, 4.0, 4.0, 4.0))],
        'main': [partial(pm.curve, d=3, p=[[-0.27118683226552831, 5.0963713164509079e-17, -0.083333345296857], [-0.29190234857282799, 5.5563481798781466e-17, -0.083333345296857], [-0.31261786488012783, 6.0163250433053878e-17, -0.083333345296857], [-0.33333338118742767, 6.4763019067326327e-17, -0.083333345296857014], [-0.33333338118742772, 6.1679065778406027e-17, -0.11111112706247596], [-0.33333338118742767, 5.8595112489485727e-17, -0.1388889088280949], [-0.33333338118742745, 5.551115920056539e-17, -0.16666669059371389], [-0.38888894471866553, 7.401487893408724e-17, -0.111111127062476], [-0.44444450824990345, 9.2518598667609029e-17, -0.05555556353123807], [-0.50000007178114136, 1.1102231840113078e-16, -1.6653347760169626e-16], [-0.44444450824990345, 1.0485441182329023e-16, 0.055555563531237771], [-0.38888894471866559, 9.8686505245449629e-17, 0.11111112706247575], [-0.33333338118742772, 9.2518598667609041e-17, 0.1666666905937137], [-0.33333338118742761, 8.9434645378688741e-17, 0.13888890882809471], [-0.33333338118742756, 8.6350692089768391e-17, 0.11111112706247576], [-0.33333338118742767, 8.326673880084814e-17, 0.083333345296856792], [-0.31177693850940258, 7.8480247002816963e-17, 0.083333345296856792], [-0.2902204958313776, 7.3693755204785823e-17, 0.083333345296856792], [-0.27099054907217029, 2.1877487574161723e-17, 0.080480888729432626], [-0.25751955596282483, 3.4076143483595905e-17, 0.12535618190776401], [-0.20932750498738548, 5.6471257558182193e-17, 0.20774126738935378], [-0.1273528076130323, 6.9683080562273015e-17, 0.25634370647202959], [-0.083333345296856959, 4.8403747825508506e-17, 0.26931551074687732], [-0.083333345296856945, 5.0772884950527465e-17, 0.29065480089372742], [-0.083333345296856959, 5.3142022075546449e-17, 0.31199409104057757], [-0.083333345296856973, 5.5511159200565415e-17, 0.33333338118742767], [-0.11111112706247595, 6.1679065778406015e-17, 0.33333338118742761], [-0.13888890882809493, 6.7846972356246628e-17, 0.33333338118742761], [-0.16666669059371392, 7.4014878934087228e-17, 0.33333338118742756], [-0.11111112706247595, 6.7846972356246615e-17, 0.38888894471866553], [-0.055555563531238056, 6.1679065778406015e-17, 0.44444450824990345], [-1.1102231840113083e-16, 5.5511159200565415e-17, 0.50000007178114136], [0.055555563531237792, 3.7007439467043614e-17, 0.44444450824990345], [0.11111112706247578, 1.8503719733521813e-17, 0.38888894471866564], [0.1666666905937137, 1.430359528141852e-32, 0.33333338118742772], [0.13888890882809474, 6.1679065778406064e-18, 0.33333338118742767], [0.11111112706247578, 1.2335813155681201e-17, 0.33333338118742767], [0.083333345296856848, 1.8503719733521804e-17, 0.33333338118742761], [0.083333345296856848, 1.613001264306978e-17, 0.31195292845133471], [0.083333345296856862, 1.3756305552617758e-17, 0.29057247571524186], [0.083363018364591743, 7.3424963480034861e-17, 0.2701090011258192], [0.12714011777698825, 6.9717335076803856e-17, 0.25646971882893732], [0.20784245909883511, 5.6729244362053745e-17, 0.20869032551066052], [0.25583769056679662, 3.4850230588281228e-17, 0.12820382233849828], [0.27036134114701899, -5.0780417315230547e-17, 0.083333345296856889], [0.29135202116048853, -5.5441284565929143e-17, 0.083333345296856889], [0.31234270117395807, -6.0102151816627732e-17, 0.083333345296856889], [0.33333338118742767, -6.4763019067326352e-17, 0.083333345296856862], [0.33333338118742772, -6.167906577840604e-17, 0.11111112706247582], [0.33333338118742767, -5.8595112489485739e-17, 0.13888890882809476], [0.33333338118742761, -5.5511159200565415e-17, 0.16666669059371378], [0.38888894471866559, -7.4014878934087252e-17, 0.11111112706247582], [0.44444450824990345, -9.2518598667609041e-17, 0.055555563531237882], [0.50000007178114136, -1.1102231840113078e-16, 1.6653347760169626e-16], [0.44444450824990345, -1.0485441182329023e-16, -0.055555563531237771], [0.38888894471866559, -9.8686505245449629e-17, -0.11111112706247575], [0.33333338118742772, -9.2518598667609041e-17, -0.1666666905937137], [0.33333338118742761, -8.9434645378688741e-17, -0.13888890882809471], [0.33333338118742717, -8.6350692089768367e-17, -0.11111112706247576], [0.33333338118742767, -8.326673880084814e-17, -0.083333345296856792], [0.31148902055140182, -7.8416316373581875e-17, -0.083333345296856792], [0.28964465991537602, -7.3565893946315622e-17, -0.083333345296856792], [0.26975761478166921, -2.2965360419118022e-17, -0.084482855275632554], [0.25605876755748702, -3.4749324411585448e-17, -0.12783261797825182], [0.2079818243709303, -5.6720625845607256e-17, -0.20865862050519357], [0.12698296757958893, -6.9742613135898617e-17, -0.25656270942735054], [0.083333345296856959, -4.8385552238967876e-17, -0.26915161947334887], [0.083333345296856945, -5.0760754559500389e-17, -0.29054554004470851], [0.083333345296856959, -5.3135956880032902e-17, -0.31193946061606803], [0.083333345296856973, -5.5511159200565415e-17, -0.33333338118742767], [0.11111112706247595, -6.1679065778406015e-17, -0.33333338118742761], [0.13888890882809493, -6.7846972356246628e-17, -0.33333338118742761], [0.16666669059371392, -7.4014878934087228e-17, -0.33333338118742756], [0.11111112706247595, -6.7846972356246615e-17, -0.38888894471866553], [0.055555563531238056, -6.1679065778406015e-17, -0.44444450824990345], [1.1102231840113078e-16, -5.5511159200565415e-17, -0.50000007178114136], [-0.055555563531237757, -3.700743946704362e-17, -0.44444450824990345], [-0.11111112706247578, -1.8503719733521813e-17, -0.38888894471866564], [-0.1666666905937137, -1.4303595281418523e-32, -0.33333338118742772], [-0.13888890882809474, -6.1679065778406064e-18, -0.33333338118742767], [-0.11111112706247578, -1.2335813155681201e-17, -0.33333338118742767], [-0.083333345296856848, -1.8503719733521804e-17, -0.33333338118742761], [-0.083333345296856848, -1.6151441486329952e-17, -0.31214594231237774], [-0.083333345296856862, -1.3799163239138094e-17, -0.29095850343732776], [-0.083333345296856862, -1.1446884991946246e-17, -0.26977106456227795], [-0.12710456257619937, -6.9723056580522298e-17, -0.25649076657048286], [-0.2085165428671297, -5.6623902927657973e-17, -0.20830280513239677], [-0.25664962035075162, -3.4478393125618012e-17, -0.12683594088700212], [-0.27026171834409768, -2.2527288093994418e-17, -0.08287131510520851]], k=(15.745750770000001, 15.745750770000001, 15.745750770000001, 15.994336930000003, 15.994336930000003, 15.994336930000003, 16.994336930000003, 16.994336930000003, 16.994336930000003, 17.994336930000003, 17.994336930000003, 17.994336930000003, 18.994336930000003, 18.994336930000003, 18.994336930000003, 19.994336930000003, 19.994336930000003, 19.994336930000003, 20.253014204999999, 20.253014204999999, 20.253014204999999, 20.885202120000002, 21.502214874, 21.502214874, 21.502214874, 21.758286319, 21.758286319, 21.758286319, 22.758286319, 22.758286319, 22.758286319, 23.758286319, 23.758286319, 23.758286319, 24.758286319, 24.758286319, 24.758286319, 25.758286319, 25.758286319, 25.758286319, 26.014851714999999, 26.014851714999999, 26.014851714999999, 26.633484611, 27.244006168999999, 27.244006168999999, 27.244006168999999, 27.495894292999999, 27.495894292999999, 27.495894292999999, 28.495894292999999, 28.495894292999999, 28.495894292999999, 29.495894292999999, 29.495894292999999, 29.495894292999999, 30.495894292999999, 30.495894292999999, 30.495894292999999, 31.495894292999999, 31.495894292999999, 31.495894292999999, 31.758026582999999, 31.758026582999999, 31.758026582999999, 32.371381249000002, 32.991210664, 32.991210664, 32.991210664, 33.247937673999999, 33.247937673999999, 33.247937673999999, 34.247937673999999, 34.247937673999999, 34.247937673999999, 35.247937673999999, 35.247937673999999, 35.247937673999999, 36.247937673999999, 36.247937673999999, 36.247937673999999, 37.247937673999999, 37.247937673999999, 37.247937673999999, 37.502186903999998, 37.502186903999998, 37.502186903999998, 38.121090553499997, 38.742038981499995, 38.742038981499995, 38.742038981499995)),
                 partial(pm.curve, d=3, p=[[1.4057201132611796e-17, 1.4057201132611796e-17, -0.22957151633269232], [-0.058414534874067073, 1.4057201132611796e-17, -0.22957151633269232], [-0.18004261502304847, 1.1033111110977267e-17, -0.18018437836376902], [-0.25409126930803444, 6.7934389616067828e-20, -0.001109452777133234], [-0.18100829360871529, -1.0936833172124684e-17, 0.17861204029993519], [-0.0022188513895999916, -1.5568639958856005e-17, 0.2542551855717991], [0.1778635152469584, -1.1128602257249335e-17, 0.18174386712964916], [0.25407193259778965, -2.0361101996689876e-19, 0.0033252203020276649], [0.18315984466557828, 1.0839027870971301e-17, -0.17701475851678794], [0.062412213466930301, 1.3992635361726024e-17, -0.22851707727433315], [0.0040065754094616955, 1.405506015279172e-17, -0.22953655147880028]], k=(0.0, 0.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 8.0, 8.0))]
    }

    colorTable = {
        'yellow': enums.Color.YELLOW,
        'red': enums.Color.RED,
        'lightRed': enums.Color.LIGHT_RED,
        'blue': enums.Color.BLUE,
        'green': enums.Color.GREEN,
        'skyBlue': enums.Color.SKY_BLUE,
        'darkBlue': enums.Color.DARK_BLUE,
        'white': enums.Color.WHITE,
    }

    def __init__(self, name, shape='circleY', scale=1.0, color='skyBlue'):
        self.name = name
        self.shape = shape
        self.scale = scale
        self.color = color

        self.spaceGrp = None
        self.autoGrp = None
        self.extraGrp = None
        self.transform = None

        self.create()

    def __str__(self):
        return self.name

    def create(self):
        curve = self.__createCurve()
        self.transform = curve.rename(self.name)
        self.setName(self.name)
        self.setColor(self.color)
        self.setScale(self.scale)

    def setName(self, name):
        oldName, self.name = self.name, name
        self.transform.rename(self.transform.replace(oldName, self.name))

    def createGroups(self, space=True, auto=False, extra=False):
        if space:
            self.spaceGrp = pm.group(
                n=self.transform.name() + '_zero', empty=True)
            self.spaceGrp | self.transform
        if auto:
            self.autoGrp = pm.group(
                n=self.transform.name() + '_auto', empty=True)
            self.autoGrp | self.transform
            if self.spaceGrp:
                self.spaceGrp | self.autoGrp
        if extra:
            parentGrp = self.transform.getParent()
            self.extraGrp = pm.group(
                n=self.transform.name() + '_extra', empty=True)
            self.extraGrp | self.transform
            if parentGrp:
                parentGrp | self.extraGrp

    def matchTo(self, target, position=False, orientation=False):
        pm.matchTransform(self.spaceGrp, target, pos=position, rot=orientation)

    def connectTo(self, target, method='constraint', parent=False, translate=False, rotate=False, scale=False):
        target = pm.PyNode(target)

        if method == 'constraint':
            if parent:
                pm.parentConstraint(self.transform, target, mo=True)
            else:
                if translate:
                    pm.pointConstraint(self.transform, target, mo=True)
                if rotate:
                    pm.orientConstraint(self.transform, target, mo=True)

        elif method == 'connect':
            if translate:
                self.transform.translate >> target.translate
            if rotate:
                self.transform.rotate >> target.rotate

        if scale:
            self.transform.scale >> target.scale

    def setShape(self, shape):
        self.shape = shape
        newCurve = self.__createCurve()
        curveUtil.replaceCurve(self.transform, newCurve)
        self.setScale(self.scale)

    def setScale(self, scale):
        controlShapes = self.transform.getShapes()
        for shape in controlShapes:
            for cv in shape.cv:
                cv.setPosition(cv.getPosition() * scale)
            shape.updateCurve()

    def rotate(self, angle):
        controlShapes = self.transform.getShapes()
        for shape in controlShapes:
            pm.select(shape.cv, r=True)
            pm.manipPivot(p=[0, 0, 0])
            pm.rotate(angle)
            shape.updateCurve()
        pm.select(cl=True)

    def setColor(self, color):
        self.color = color
        self.transform.overrideEnabled.set(True)
        self.transform.overrideColor.set(
            Controller.colorTable.get(self.color))

    def lockHide(self, channels, axes):
        for channel in channels:
            if channel == 'visibility':
                self.transform.attr(channel).lock()
                self.transform.attr(channel).setKeyable(False)
                continue
            for axis in axes:
                self.transform.attr(channel+axis).lock()
                self.transform.attr(channel+axis).setKeyable(False)

    def __createCurve(self):
        curveCommands = Controller.curveCommands.get(self.shape)
        curves = []
        for command in curveCommands:
            ctrl = command()
            if isinstance(ctrl, list):
                ctrl = ctrl[0]
            curves.append(ctrl)
        combineCurve = curveUtil.combineCurves(
            curves) if len(curves) >= 2 else curves[0]
        return combineCurve
