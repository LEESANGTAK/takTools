//Maya Preference 2023 (Release 1)
//
//

runTimeCommand
	-label ""
	-annotation "Tak_Display_MarkingMenu (Press)"
	-longAnnotation ""
	-category "User Marking Menus"
	-image ""
	-tags ""
	-keywords ""
	-plugin ""
	-helpUrl ""
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("if (`popupMenu -exists tempMM`) { deleteUI tempMM; }\npopupMenu -button 1 -ctl false -alt false -sh true -allowOptionBoxes true -parent `findPanelPopupParent` -mm 1 tempMM; \nsource \"menu_Tak_Display_MarkingMenu\";\n")
	Tak_Display_MarkingMenu_Press;

runTimeCommand
	-label ""
	-annotation "Tak_Display_MarkingMenu (Release)"
	-longAnnotation ""
	-category "User Marking Menus"
	-image ""
	-tags ""
	-keywords ""
	-plugin ""
	-helpUrl ""
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("if (`popupMenu -exists tempMM`) { deleteUI tempMM; }")
	Tak_Display_MarkingMenu_Release;

runTimeCommand
	-label ""
	-annotation "Tak_Selection_MarkingMenu (Press)"
	-longAnnotation ""
	-category "User Marking Menus"
	-image ""
	-tags ""
	-keywords ""
	-plugin ""
	-helpUrl ""
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("if (`popupMenu -exists tempMM`) { deleteUI tempMM; }\npopupMenu -button 1 -ctl false -alt false -sh true -allowOptionBoxes true -parent `findPanelPopupParent` -mm 1 tempMM; \nsource \"menu_Tak_Selection_MarkingMenu\";\n")
	Tak_Selection_MarkingMenu_Press;

runTimeCommand
	-label ""
	-annotation "Tak_Selection_MarkingMenu (Release)"
	-longAnnotation ""
	-category "User Marking Menus"
	-image ""
	-tags ""
	-keywords ""
	-plugin ""
	-helpUrl ""
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("if (`popupMenu -exists tempMM`) { deleteUI tempMM; }")
	Tak_Selection_MarkingMenu_Release;

runTimeCommand
	-label ""
	-annotation "Tak_Rigging_MarkingMenu (Press)"
	-longAnnotation ""
	-category "User Marking Menus"
	-image ""
	-tags ""
	-keywords ""
	-plugin ""
	-helpUrl ""
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("if (`popupMenu -exists tempMM`) { deleteUI tempMM; }\npopupMenu -button 1 -ctl false -alt false -sh true -allowOptionBoxes true -parent `findPanelPopupParent` -mm 1 tempMM; \nsource \"menu_Tak_Rigging_MarkingMenu\";\n")
	Tak_Rigging_MarkingMenu_Press;

runTimeCommand
	-label ""
	-annotation "Tak_Rigging_MarkingMenu (Release)"
	-longAnnotation ""
	-category "User Marking Menus"
	-image ""
	-tags ""
	-keywords ""
	-plugin ""
	-helpUrl ""
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("if (`popupMenu -exists tempMM`) { deleteUI tempMM; }")
	Tak_Rigging_MarkingMenu_Release;

runTimeCommand
	-label ""
	-annotation "Tak_Skin_MarkingMenu (Press)"
	-longAnnotation ""
	-category "User Marking Menus"
	-image ""
	-tags ""
	-keywords ""
	-plugin ""
	-helpUrl ""
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("if (`popupMenu -exists tempMM`) { deleteUI tempMM; }\npopupMenu -button 1 -ctl false -alt false -sh true -allowOptionBoxes true -parent `findPanelPopupParent` -mm 1 tempMM; \nsource \"menu_Tak_Skin_MarkingMenu\";\n")
	Tak_Skin_MarkingMenu_Press;

runTimeCommand
	-label ""
	-annotation "Tak_Skin_MarkingMenu (Release)"
	-longAnnotation ""
	-category "User Marking Menus"
	-image ""
	-tags ""
	-keywords ""
	-plugin ""
	-helpUrl ""
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("if (`popupMenu -exists tempMM`) { deleteUI tempMM; }")
	Tak_Skin_MarkingMenu_Release;

runTimeCommand
	-label ""
	-annotation "Toggle deformers for selected meshes"
	-longAnnotation ""
	-category "Custom Scripts.Rigging"
	-image ""
	-tags ""
	-keywords ""
	-plugin ""
	-helpUrl ""
	-hotkeyCtx ""
	-commandLanguage "python"
	-command ("from imp import reload\nfrom takTools.utils import mesh as meshUtil\nreload(meshUtil)\n\nmeshes = cmds.filterExpand(cmds.ls(sl=True), sm=12)\nfor mesh in meshes:\n\tmeshUtil.toggleDeformers(mesh)\n")
	toggleDeformers;

runTimeCommand
	-label ""
	-annotation "Smooth skin weights for selected components using btSmoothWeights tool."
	-longAnnotation ""
	-category "Custom Scripts.Skinning"
	-image ""
	-tags ""
	-keywords ""
	-plugin ""
	-helpUrl ""
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("if (!`pluginInfo -q -loaded \"brSmoothWeights\"`) {\n    loadPlugin \"brSmoothWeights\";\n}\n\nif (!`brSmoothWeightsContext -q -ex \"brSmoothWeightsContext1\"`) {\n    string $brSmoothWeightsCtx = `brSmoothWeightsContext`;\n    setToolTo $brSmoothWeightsCtx;\n}\n\nbrSmoothWeightsContext -edit -flood `floatSliderGrp -query -value brSmoothWeightsStrength` \"brSmoothWeightsContext1\";\n")
	smoothSkinWeights;

runTimeCommand
	-label ""
	-annotation "Create a joint on center of selected objects."
	-longAnnotation ""
	-category "Custom Scripts.Rigging"
	-image ""
	-tags ""
	-keywords ""
	-plugin ""
	-helpUrl ""
	-hotkeyCtx ""
	-commandLanguage "python"
	-command ("from imp import reload\nfrom takTools.utils import joint as jntUtil; reload(jntUtil)\n\n\nsels = cmds.ls(sl=True, fl=True)\n\n# Handle if components exists in selection\nedgesFaces = cmds.filterExpand(sels, sm=[32, 34])\nif edgesFaces:\n    vertices = cmds.ls(cmds.polyListComponentConversion(sels, toVertex=True), fl=True)\n    sels = list(set(sels) - set(edgesFaces))\n    sels.extend(vertices)\n\njntUtil.createOnCenter(sels)")
	createJointOnCenter;

runTimeCommand
	-label ""
	-annotation "Toggle display wireframe of meshes."
	-longAnnotation ""
	-category "Custom Scripts.Display"
	-image ""
	-tags ""
	-keywords ""
	-plugin ""
	-helpUrl ""
	-hotkeyCtx ""
	-commandLanguage "python"
	-command ("import takTools.common.tak_misc as tak_misc\nimport imp; imp.reload(tak_misc)\ntak_misc.wireOnOff()")
	toggleWire;

runTimeCommand
	-label ""
	-annotation "Toggle selection mode"
	-longAnnotation ""
	-category "Custom Scripts.Select"
	-image ""
	-tags ""
	-keywords ""
	-plugin ""
	-helpUrl ""
	-hotkeyCtx ""
	-commandLanguage "python"
	-command ("objMode = cmds.selectMode(q=True, object=True)\nif not objMode:\n    cmds.selectMode(object=True)\nelse:\n    cmds.selectMode(component=True)\n")
	toggleComponentMode;

runTimeCommand
	-label ""
	-annotation "Toggle vertex color display for selected meshes."
	-longAnnotation ""
	-category "Custom Scripts.Display"
	-image ""
	-tags ""
	-keywords ""
	-plugin ""
	-helpUrl ""
	-hotkeyCtx ""
	-commandLanguage "python"
	-command ("sels = cmds.ls(sl=True)\nmeshes = cmds.filterExpand(sels, sm=12)\nfor mesh in meshes:\n    curVtxColorState = cmds.getAttr(mesh+'.displayColors')\n    cmds.setAttr(mesh+'.displayColors', not curVtxColorState)")
	toggleVertexColor;

